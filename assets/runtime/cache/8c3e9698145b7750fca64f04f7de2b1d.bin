a:2:{i:0;a:3:{s:10:"sourceFile";s:61:"/var/www/html/plansys/components/ui/FormFields/DataFilter.php";s:4:"file";a:658:{i:0;s:5:"<?php";i:1;s:0:"";i:2;s:3:"/**";i:3;s:19:" * Class DataFilter";i:4;s:16:" * @author rizky";i:5;s:3:" */";i:6;s:36:"class DataFilter extends FormField {";i:7;s:0:"";i:8;s:35:"    /** @var string $toolbarName */";i:9;s:47:"    public static $toolbarName = "Data Filter";";i:10;s:0:"";i:11;s:32:"    /** @var string $category */";i:12;s:46:"    public static $category = "Data & Tables";";i:13;s:0:"";i:14;s:35:"    /** @var string $toolbarIcon */";i:15;s:48:"    public static $toolbarIcon = "fa fa-filter";";i:16;s:0:"";i:17;s:28:"    /** @var string $name */";i:18;s:17:"    public $name;";i:19;s:0:"";i:20;s:34:"    /** @var string $datasource */";i:21;s:23:"    public $datasource;";i:22;s:0:"";i:23;s:31:"    /** @var string $filters */";i:24;s:25:"    public $filters = [];";i:25;s:25:"    public $options = [];";i:26;s:32:"    public $includeEmpty = 'No';";i:27;s:28:"    public $emptyValue = '';";i:28;s:28:"    public $emptyLabel = '';";i:29;s:31:"    public $filterOperators = [";i:30;s:21:"        'string' => [";i:31;s:24:"            'Is Any Of',";i:32;s:28:"            'Is Not Any Of',";i:33;s:23:"            'Contains',";i:34;s:31:"            'Does Not Contain',";i:35;s:26:"            'Is Equal To',";i:36;s:26:"            'Starts With',";i:37;s:24:"            'Ends With',";i:38;s:23:"            'Is Empty',";i:39;s:26:"            'Is Not Empty'";i:40;s:10:"        ],";i:41;s:21:"        'number' => [";i:42;s:16:"            '=',";i:43;s:17:"            '<>',";i:44;s:16:"            '>',";i:45;s:17:"            '>=',";i:46;s:17:"            '<=',";i:47;s:16:"            '<',";i:48;s:23:"            'Is Empty',";i:49;s:26:"            'Is Not Empty'";i:50;s:10:"        ],";i:51;s:19:"        'date' => [";i:52;s:22:"            'Between',";i:53;s:26:"            'Not Between',";i:54;s:24:"            'Less Than',";i:55;s:24:"            'More Than',";i:56;s:20:"            'Daily',";i:57;s:21:"            'Weekly',";i:58;s:22:"            'Monthly',";i:59;s:21:"            'Yearly',";i:60;s:9:"        ]";i:61;s:6:"    ];";i:62;s:0:"";i:63;s:59:"    public static function getFilterOperators($date = "") {";i:64;s:28:"        $a = new DataFilter;";i:65;s:39:"        $filters = $a->filterOperators;";i:66;s:26:"        if ($date != "") {";i:67;s:39:"            $filters = $filters[$date];";i:68;s:25:"            $result = [];";i:69;s:44:"            foreach ($filters as $i => $k) {";i:70;s:33:"                $result[$k] = $k;";i:71;s:13:"            }";i:72;s:9:"        }";i:73;s:47:"        return ['' => 'No Operator'] + $result;";i:74;s:5:"    }";i:75;s:0:"";i:76;s:100:"    public static function generateParams($paramName, $params, $template = '', $paramOptions = []) {";i:77;s:18:"        $sql = [];";i:78;s:25:"        $flatParams = [];";i:79;s:66:"        $paramName = preg_replace('/[^\da-z]/i', '_', $paramName);";i:80;s:0:"";i:81;s:54:"        if (is_array($params) && count($params) > 0) {";i:82;s:53:"            foreach ($params as $column => $filter) {";i:83;s:0:"";i:84;s:84:"                $param = DataFilter::buildSingleParam($paramName, $column, $filter);";i:85;s:0:"";i:86;s:39:"                $sql[] = $param['sql'];";i:87;s:48:"                if (is_array($param['param'])) {";i:88;s:65:"                    foreach ($param['param'] as $key => $value) {";i:89;s:51:"                        $flatParams[$key] = $value;";i:90;s:21:"                    }";i:91;s:24:"                } else {";i:92;s:72:"                    $column = preg_replace('/[^\da-z]/i', '_', $column);";i:93;s:78:"                    $flatParams[$paramName . "_" . $column] = $param['param'];";i:94;s:17:"                }";i:95;s:13:"            }";i:96;s:9:"        }";i:97;s:0:"";i:98;s:20:"        $query = '';";i:99;s:30:"        if (count($sql) > 0) {";i:100;s:44:"            $query = implode(" AND ", $sql);";i:101;s:64:"            if (strpos("[{$paramName}]", $template) !== false) {";i:102;s:74:"                $query = str_replace("[{$paramName}]", $query, $template);";i:103;s:13:"            }";i:104;s:0:"";i:105;s:67:"            if ($template == "[{$paramName}]" || $template == '') {";i:106;s:43:"                $query = "where " . $query;";i:107;s:13:"            }";i:108;s:9:"        }";i:109;s:0:"";i:110;s:21:"        $template = [";i:111;s:28:"            'sql' => $query,";i:112;s:35:"            'params' => $flatParams";i:113;s:10:"        ];";i:114;s:0:"";i:115;s:25:"        return $template;";i:116;s:5:"    }";i:117;s:0:"";i:118;s:64:"    public static function toSQLDateTime($val, $driver = null) {";i:119;s:31:"        if (is_null($driver)) {";i:120;s:48:"            $driver = Setting::get('db.driver');";i:121;s:9:"        }";i:122;s:0:"";i:123;s:26:"        switch ($driver) {";i:124;s:23:"            case "oci";";i:125;s:66:"                return "TO_DATE({$val}, 'YYYY-MM-DD HH24:MI:SS')";";i:126;s:22:"                break;";i:127;s:20:"            default:";i:128;s:28:"                return $val;";i:129;s:22:"                break;";i:130;s:9:"        }";i:131;s:5:"    }";i:132;s:0:"";i:133;s:0:"";i:134;s:59:"    public static function toSQLStr($val, $driver = null) {";i:135;s:31:"        if (is_null($driver)) {";i:136;s:48:"            $driver = Setting::get('db.driver');";i:137;s:9:"        }";i:138;s:0:"";i:139;s:26:"        switch ($driver) {";i:140;s:23:"            case "oci";";i:141;s:39:"                return "UPPER({$val})";";i:142;s:22:"                break;";i:143;s:20:"            default:";i:144;s:28:"                return $val;";i:145;s:22:"                break;";i:146;s:9:"        }";i:147;s:5:"    }";i:148;s:0:"";i:149;s:60:"    public static function toSQLDate($val, $driver = null) {";i:150;s:31:"        if (is_null($driver)) {";i:151;s:48:"            $driver = Setting::get('db.driver');";i:152;s:9:"        }";i:153;s:0:"";i:154;s:26:"        switch ($driver) {";i:155;s:23:"            case "oci";";i:156;s:55:"                return "TO_DATE({$val}, 'YYYY-MM-DD')";";i:157;s:22:"                break;";i:158;s:20:"            default:";i:159;s:28:"                return $val;";i:160;s:22:"                break;";i:161;s:9:"        }";i:162;s:5:"    }";i:163;s:0:"";i:164;s:78:"    protected static function buildSingleParam($paramName, $column, $filter) {";i:165;s:18:"        $sql = "";";i:166;s:20:"        $param = "";";i:167;s:61:"        $pcolumn = preg_replace('/[^\da-z]/i', '_', $column);";i:168;s:44:"        $driver = Setting::get('db.driver');";i:169;s:8:"        ";i:170;s:8:"        ";i:171;s:69:"        if (@$filter['mode'] == 'raw' && isset($filter['colname'])) {";i:172;s:41:"            $column = $filter['colname'];";i:173;s:16:"        } else {";i:174;s:75:"            $column = ActiveRecord::formatSingleCriteria($column, $driver);";i:175;s:12:"            ";i:176;s:59:"            ## quote field if it is containing illegal char";i:177;s:91:"            if (!preg_match("/^[a-zA-Z_][a-zA-Z0-9_]*$/", str_replace(".", "", $column))) {";i:178;s:38:"                $column = "{$column}";";i:179;s:13:"            }";i:180;s:9:"        }";i:181;s:0:"";i:182;s:34:"        switch ($filter['type']) {";i:183;s:26:"            case "string":";i:184;s:82:"                if ($filter['value'] != "" || $filter['operator'] == 'Is Empty') {";i:185;s:71:"                    $sCol = DataFilter::toSQLStr("{$column}", $driver);";i:186;s:87:"                    $spCol = DataFilter::toSQLStr(":{$paramName}_{$pcolumn}", $driver);";i:187;s:0:"";i:188;s:50:"                    switch ($filter['operator']) {";i:189;s:40:"                        case "Contains":";i:190;s:59:"                            $sql = "{$sCol} LIKE {$spCol}";";i:191;s:60:"                            $param = "%{$filter['value']}%";";i:192;s:34:"                            break;";i:193;s:48:"                        case "Does Not Contain":";i:194;s:63:"                            $sql = "{$sCol} NOT LIKE {$spCol}";";i:195;s:60:"                            $param = "%{$filter['value']}%";";i:196;s:34:"                            break;";i:197;s:43:"                        case "Is Equal To":";i:198;s:59:"                            $sql = "{$sCol} LIKE {$spCol}";";i:199;s:58:"                            $param = "{$filter['value']}";";i:200;s:34:"                            break;";i:201;s:43:"                        case "Starts With":";i:202;s:59:"                            $sql = "{$sCol} LIKE {$spCol}";";i:203;s:59:"                            $param = "{$filter['value']}%";";i:204;s:34:"                            break;";i:205;s:41:"                        case "Ends With":";i:206;s:59:"                            $sql = "{$sCol} LIKE {$spCol}";";i:207;s:59:"                            $param = "%{$filter['value']}";";i:208;s:34:"                            break;";i:209;s:41:"                        case "Is Any Of":";i:210;s:85:"                            $param_raw = preg_split('/\s+/', trim($filter['value']));";i:211;s:40:"                            $param = [];";i:212;s:39:"                            $psql = [];";i:213;s:62:"                            foreach ($param_raw as $k => $p) {";i:214;s:83:"                                $param[":{$paramName}_{$pcolumn}_{$k}"] = "%{$p}%";";i:215;s:104:"                                $spCol = DataFilter::toSQLStr(":{$paramName}_{$pcolumn}_{$k}", $driver);";i:216;s:66:"                                $psql[] = "{$sCol} LIKE {$spCol}";";i:217;s:29:"                            }";i:218;s:70:"                            $sql = "(" . implode(" OR ", $psql) . ")";";i:219;s:34:"                            break;";i:220;s:45:"                        case "Is Not Any Of":";i:221;s:85:"                            $param_raw = preg_split('/\s+/', trim($filter['value']));";i:222;s:40:"                            $param = [];";i:223;s:39:"                            $psql = [];";i:224;s:62:"                            foreach ($param_raw as $k => $p) {";i:225;s:83:"                                $param[":{$paramName}_{$pcolumn}_{$k}"] = "%{$p}%";";i:226;s:104:"                                $spCol = DataFilter::toSQLStr(":{$paramName}_{$pcolumn}_{$k}", $driver);";i:227;s:66:"                                $psql[] = "{$sCol} LIKE {$spCol}";";i:228;s:29:"                            }";i:229;s:71:"                            $sql = "(" . implode(" AND ", $psql) . ")";";i:230;s:34:"                            break;";i:231;s:40:"                        case "Is Empty":";i:232;s:78:"                            $sql = "({$column} LIKE '' OR {$column} IS NULL)";";i:233;s:34:"                            break;";i:234;s:44:"                        case "Is Not Empty":";i:235;s:87:"                            $sql = "({$column} NOT LIKE '' AND {$column} IS NOT NULL)";";i:236;s:34:"                            break;";i:237;s:21:"                    }";i:238;s:17:"                }";i:239;s:22:"                break;";i:240;s:26:"            case "number":";i:241;s:82:"                if ($filter['value'] != "" || $filter['operator'] == 'Is Empty') {";i:242;s:50:"                    switch ($filter['operator']) {";i:243;s:33:"                        case "=":";i:244;s:34:"                        case "<>":";i:245;s:33:"                        case ">":";i:246;s:33:"                        case '>':";i:247;s:34:"                        case '>=':";i:248;s:34:"                        case '<=':";i:249;s:33:"                        case '<':";i:250;s:94:"                            $sql = "{$column} {$filter['operator']} :{$paramName}_{$pcolumn}";";i:251;s:58:"                            $param = "{$filter['value']}";";i:252;s:34:"                            break;";i:253;s:40:"                        case "Is Empty":";i:254;s:57:"                            $sql = "({$column} IS NULL)";";i:255;s:34:"                            break;";i:256;s:44:"                        case "Is Not Empty":";i:257;s:60:"                            $sql = "{$column} IS NOT NULL)";";i:258;s:34:"                            break;";i:259;s:21:"                    }";i:260;s:17:"                }";i:261;s:22:"                break;";i:262;s:24:"            case "date":";i:263;s:46:"                switch ($filter['operator']) {";i:264;s:35:"                    case "Between":";i:265;s:34:"                    case "Weekly":";i:266;s:35:"                    case "Monthly":";i:267;s:34:"                    case "Yearly":";i:268;s:95:"                        if (@$filter['value']['from'] != '' && @$filter['value']['to'] != '') {";i:269;s:95:"                            $a = self::toSQLDateTime(":{$paramName}_{$pcolumn}_from", $driver);";i:270;s:93:"                            $b = self::toSQLDateTime(":{$paramName}_{$pcolumn}_to", $driver);";i:271;s:0:"";i:272;s:71:"                            $sql = "({$column} BETWEEN {$a} AND {$b})";";i:273;s:127:"                            $fromStartHour = date('Y-m-d 23:59:00', strtotime('-1 day', strtotime(@$filter['value']['from'])));";i:274;s:101:"                            $toLastHour = date('Y-m-d 23:59:00', strtotime(@$filter['value']['to']));";i:275;s:0:"";i:276;s:38:"                            $param = [";i:277;s:82:"                                ":{$paramName}_{$pcolumn}_from" => $fromStartHour,";i:278;s:77:"                                ":{$paramName}_{$pcolumn}_to" => $toLastHour,";i:279;s:30:"                            ];";i:280;s:25:"                        }";i:281;s:30:"                        break;";i:282;s:39:"                    case "Not Between":";i:283;s:95:"                        if (@$filter['value']['from'] != '' && @$filter['value']['to'] != '') {";i:284;s:95:"                            $a = self::toSQLDateTime(":{$paramName}_{$pcolumn}_from", $driver);";i:285;s:93:"                            $b = self::toSQLDateTime(":{$paramName}_{$pcolumn}_to", $driver);";i:286;s:0:"";i:287;s:75:"                            $sql = "({$column} NOT BETWEEN {$a} AND {$b})";";i:288;s:0:"";i:289;s:101:"                            $toLastHour = date('Y-m-d 23:59:00', strtotime(@$filter['value']['to']));";i:290;s:38:"                            $param = [";i:291;s:93:"                                ":{$paramName}_{$pcolumn}_from" => @$filter['value']['from'],";i:292;s:77:"                                ":{$paramName}_{$pcolumn}_to" => $toLastHour,";i:293;s:30:"                            ];";i:294;s:0:"";i:295;s:99:"                            if (@$filter['value']['to'] == '' || @$filter['value']['from'] == '') {";i:296;s:47:"                                $sql = "1 = 1";";i:297;s:29:"                            }";i:298;s:25:"                        }";i:299;s:30:"                        break;";i:300;s:37:"                    case "More Than":";i:301;s:62:"                        if (@$filter['value']['from'] != '') {";i:302;s:109:"                            $sql = "{$column} > " . self::toSQLDateTime(":{$paramName}_{$pcolumn}", $driver);";i:303;s:63:"                            $param = @$filter['value']['from'];";i:304;s:25:"                        }";i:305;s:30:"                        break;";i:306;s:37:"                    case "Less Than":";i:307;s:60:"                        if (@$filter['value']['to'] != '') {";i:308;s:109:"                            $sql = "{$column} < " . self::toSQLDateTime(":{$paramName}_{$pcolumn}", $driver);";i:309;s:61:"                            $param = @$filter['value']['to'];";i:310;s:25:"                        }";i:311;s:30:"                        break;";i:312;s:33:"                    case "Daily":";i:313;s:54:"                        if (@$filter['value'] != '') {";i:314;s:53:"                            if ($driver == "mysql") {";i:315;s:90:"                                $sql = "DATE({$column}) = DATE(:{$paramName}_{$pcolumn})";";i:316;s:58:"                            } else if ($driver == "oci") {";i:317;s:159:"                                $sql = "TO_CHAR({$column},'YY-MM-DD') = TO_CHAR(" . self::toSQLDateTime(":{$paramName}_{$pcolumn}", $driver) . ", 'YY-MM-DD')";";i:318;s:29:"                            }";i:319;s:55:"                            $param = @$filter['value'];";i:320;s:25:"                        }";i:321;s:30:"                        break;";i:322;s:17:"                }";i:323;s:22:"                break;";i:324;s:24:"            case "list":";i:325;s:72:"                if (isset($filter['value']) && $filter['value'] != '') {";i:326;s:69:"                    $sql = "{$column} LIKE :{$paramName}_{$pcolumn}";";i:327;s:47:"                    $param = @$filter['value'];";i:328;s:17:"                }";i:329;s:22:"                break;";i:330;s:28:"            case "relation":";i:331;s:46:"                switch ($filter['operator']) {";i:332;s:33:"                    case 'empty':";i:333;s:57:"                        if ($filter['value'] == 'null') {";i:334;s:55:"                            $sql = "{$column} is null";";i:335;s:55:"                            $param = @$filter['value'];";i:336;s:32:"                        } else {";i:337;s:74:"                            $sql = "{$column} = :{$paramName}_{$pcolumn}";";i:338;s:55:"                            $param = @$filter['value'];";i:339;s:25:"                        }";i:340;s:30:"                        break;";i:341;s:28:"                    default:";i:342;s:53:"                        if ($filter['value'] != '') {";i:343;s:74:"                            $sql = "{$column} = :{$paramName}_{$pcolumn}";";i:344;s:55:"                            $param = @$filter['value'];";i:345;s:25:"                        }";i:346;s:30:"                        break;";i:347;s:17:"                }";i:348;s:22:"                break;";i:349;s:25:"            case "check":";i:350;s:45:"                if ($filter['value'] != '') {";i:351;s:55:"                    if (@$filter['operator'] == 'in') {";i:352;s:38:"                        // USING IN...";i:353;s:36:"                        $param = [];";i:354;s:35:"                        $psql = [];";i:355;s:64:"                        foreach ($filter['value'] as $k => $p) {";i:356;s:77:"                            $param[":{$paramName}_{$pcolumn}_{$k}"] = "{$p}";";i:357;s:70:"                            $psql[] = ":{$paramName}_{$pcolumn}_{$k}";";i:358;s:25:"                        }";i:359;s:77:"                        $sql = "{$column} IN (" . implode(", ", $psql) . ")";";i:360;s:28:"                    } else {";i:361;s:40:"                        // USING LIKE...";i:362;s:36:"                        $param = [];";i:363;s:35:"                        $psql = [];";i:364;s:64:"                        foreach ($filter['value'] as $k => $p) {";i:365;s:79:"                            $param[":{$paramName}_{$pcolumn}_{$k}"] = "%{$p}%";";i:366;s:85:"                            $psql[] = "{$column} LIKE :{$paramName}_{$pcolumn}_{$k}";";i:367;s:25:"                        }";i:368;s:67:"                        $sql = "(" . implode(" AND ", $psql) . ")";";i:369;s:21:"                    }";i:370;s:17:"                }";i:371;s:22:"                break;";i:372;s:9:"        }";i:373;s:50:"        return ['sql' => $sql, 'param' => $param];";i:374;s:5:"    }";i:375;s:0:"";i:376;s:7:"    /**";i:377;s:57:"     * @return array me-return array property DataFilter.";i:378;s:7:"     */";i:379;s:42:"    public function getFieldProperties() {";i:380;s:22:"        return array (";i:381;s:19:"            array (";i:382;s:46:"                'label' => 'Data Filter Name',";i:383;s:33:"                'name' => 'name',";i:384;s:36:"                'labelWidth' => '5',";i:385;s:36:"                'fieldWidth' => '7',";i:386;s:36:"                'options' => array (";i:387;s:48:"                    'ng-model' => 'active.name',";i:388;s:56:"                    'ng-change' => 'changeActiveName()',";i:389;s:40:"                    'ng-delay' => '500',";i:390;s:18:"                ),";i:391;s:38:"                'type' => 'TextField',";i:392;s:14:"            ),";i:393;s:19:"            array (";i:394;s:46:"                'label' => 'Data Source Name',";i:395;s:39:"                'name' => 'datasource',";i:396;s:36:"                'options' => array (";i:397;s:54:"                    'ng-model' => 'active.datasource',";i:398;s:44:"                    'ng-change' => 'save()',";i:399;s:40:"                    'ng-delay' => '500',";i:400;s:50:"                    'ps-list' => 'dataSourceList',";i:401;s:18:"                ),";i:402;s:36:"                'labelWidth' => '5',";i:403;s:36:"                'fieldWidth' => '7',";i:404;s:41:"                'type' => 'DropDownList',";i:405;s:14:"            ),";i:406;s:19:"            array (";i:407;s:46:"                'label' => 'Generate Filters',";i:408;s:42:"                'buttonType' => 'success',";i:409;s:34:"                'icon' => 'magic',";i:410;s:41:"                'buttonSize' => 'btn-xs',";i:411;s:36:"                'options' => array (";i:412;s:68:"                    'style' => 'float:right;margin:0px 0px 5px 0px',";i:413;s:61:"                    'ng-show' => 'active.datasource != \'\'',";i:414;s:54:"                    'ng-click' => 'generateFilters()',";i:415;s:18:"                ),";i:416;s:39:"                'type' => 'LinkButton',";i:417;s:14:"            ),";i:418;s:19:"            array (";i:419;s:33:"                'type' => 'Text',";i:420;s:60:"                'value' => '<div class=\'clearfix\'></div>',";i:421;s:14:"            ),";i:422;s:19:"            array (";i:423;s:48:"                'label' => 'DataFilter Options',";i:424;s:36:"                'name' => 'options',";i:425;s:41:"                'type' => 'KeyValueGrid',";i:426;s:14:"            ),";i:427;s:19:"            array (";i:428;s:37:"                'title' => 'Filters',";i:429;s:42:"                'type' => 'SectionHeader',";i:430;s:14:"            ),";i:431;s:19:"            array (";i:432;s:33:"                'type' => 'Text',";i:433;s:67:"                'value' => '<div style=\'margin-top:5px;\'></div>',";i:434;s:14:"            ),";i:435;s:19:"            array (";i:436;s:36:"                'name' => 'filters',";i:437;s:42:"                'fieldTemplate' => 'form',";i:438;s:92:"                'templateForm' => 'application.components.ui.FormFields.DataFilterListForm',";i:439;s:64:"                'inlineJS' => 'DataFilter/inlinejs/dfr-init.js',";i:440;s:36:"                'options' => array (";i:441;s:51:"                    'ng-model' => 'active.filters',";i:442;s:44:"                    'ng-change' => 'save()',";i:443;s:59:"                    'ps-after-add' => 'value.show = true;',";i:444;s:18:"                ),";i:445;s:45:"                'singleViewOption' => array (";i:446;s:36:"                    'name' => 'val',";i:447;s:42:"                    'fieldType' => 'text',";i:448;s:38:"                    'labelWidth' => 0,";i:449;s:39:"                    'fieldWidth' => 12,";i:450;s:45:"                    'fieldOptions' => array (";i:451;s:42:"                        'ng-delay' => 500,";i:452;s:22:"                    ),";i:453;s:18:"                ),";i:454;s:37:"                'type' => 'ListView',";i:455;s:14:"            ),";i:456;s:10:"        );";i:457;s:5:"    }";i:458;s:0:"";i:459;s:7:"    /**";i:460;s:63:"     * @return array me-return array javascript yang di-include";i:461;s:7:"     */";i:462;s:33:"    public function includeJS() {";i:463;s:34:"        return ['data-filter.js'];";i:464;s:5:"    }";i:465;s:0:"";i:466;s:34:"    public function includeCSS() {";i:467;s:35:"        return ['data-filter.css'];";i:468;s:5:"    }";i:469;s:0:"";i:470;s:35:"    public function datasources() {";i:471;s:69:"        $ds = $this->builder->findAllField(['type' => 'DataSource']);";i:472;s:21:"        $return = [];";i:473;s:29:"        foreach ($ds as $d) {";i:474;s:91:"            if (@$d['params']['where'] == $this->name || $d['name'] == $this->datasource) {";i:475;s:48:"                array_push($return, $d['name']);";i:476;s:13:"            }";i:477;s:9:"        }";i:478;s:0:"";i:479;s:23:"        return $return;";i:480;s:5:"    }";i:481;s:0:"";i:482;s:37:"    public function actionRelInit() {";i:483;s:0:"";i:484;s:53:"        $postdata = file_get_contents("php://input");";i:485;s:41:"        $post = CJSON::decode($postdata);";i:486;s:0:"";i:487;s:30:"        if (count($post) == 0)";i:488;s:18:"            die();";i:489;s:0:"";i:490;s:44:"        $fb = FormBuilder::load($post['m']);";i:491;s:53:"        $ff = $fb->findField(['name' => $post['f']]);";i:492;s:8:"        ";i:493;s:45:"        foreach ($ff['filters'] as $filter) {";i:494;s:46:"            if ($filter['name'] != $post['n'])";i:495;s:25:"                continue;";i:496;s:16:"                ";i:497;s:45:"            if (!isset($filter['relParams']) ";i:498;s:52:"                || !isset($filter['relModelClass']) ";i:499;s:51:"                || !isset($filter['relCriteria'])) ";i:500;s:25:"                continue;";i:501;s:0:"";i:502;s:36:"            $rf = new RelationField;";i:503;s:47:"            $rf->params = $filter['relParams'];";i:504;s:55:"            $rf->modelClass = $filter['relModelClass'];";i:505;s:59:"            $rf->relationCriteria = $filter['relCriteria'];";i:506;s:77:"            $rf->relationCriteria['limit'] = ActiveRecord::DEFAULT_PAGE_SIZE;";i:507;s:48:"            $rf->relationCriteria['offset'] = 0;";i:508;s:0:"";i:509;s:49:"            $rf->idField = $filter['relIdField'];";i:510;s:55:"            $rf->labelField = $filter['relLabelField'];";i:511;s:0:"";i:512;s:36:"            if (isset($post['v'])) {";i:513;s:87:"                $rf->relationCriteria['condition'] = $rf->idField . ' = :dataFilterID';";i:514;s:58:"                $rf->params[':dataFilterID'] = $post['v'];";i:515;s:13:"            }";i:516;s:42:"            $rf->builder = $this->builder;";i:517;s:0:"";i:518;s:60:"            $rawList = $rf->query(@$post['s'], $rf->params);";i:519;s:39:"            echo json_encode($rawList);";i:520;s:9:"        }";i:521;s:5:"    }";i:522;s:0:"";i:523;s:37:"    public function actionRelnext() {";i:524;s:0:"";i:525;s:53:"        $postdata = file_get_contents("php://input");";i:526;s:41:"        $post = CJSON::decode($postdata);";i:527;s:0:"";i:528;s:32:"        if (count($post) == 0) {";i:529;s:18:"            die();";i:530;s:9:"        }";i:531;s:0:"";i:532;s:29:"        $start = @$post['i'];";i:533;s:0:"";i:534;s:44:"        $fb = FormBuilder::load($post['m']);";i:535;s:53:"        $ff = $fb->findField(['name' => $post['f']]);";i:536;s:0:"";i:537;s:45:"        foreach ($ff['filters'] as $filter) {";i:538;s:46:"            if ($filter['name'] != $post['n'])";i:539;s:25:"                continue;";i:540;s:0:"";i:541;s:36:"            $rf = new RelationField;";i:542;s:47:"            $rf->params = $filter['relParams'];";i:543;s:55:"            $rf->modelClass = $filter['relModelClass'];";i:544;s:59:"            $rf->relationCriteria = $filter['relCriteria'];";i:545;s:77:"            $rf->relationCriteria['limit'] = ActiveRecord::DEFAULT_PAGE_SIZE;";i:546;s:53:"            $rf->relationCriteria['offset'] = $start;";i:547;s:0:"";i:548;s:49:"            $rf->idField = $filter['relIdField'];";i:549;s:55:"            $rf->labelField = $filter['relLabelField'];";i:550;s:42:"            $rf->builder = $this->builder;";i:551;s:0:"";i:552;s:84:"            $rf->params = is_null($filter['relParams']) ? [] : $filter['relParams'];";i:553;s:40:"            if (is_array($rf->params)) {";i:554;s:52:"                foreach ($rf->params as $k => $ff) {";i:555;s:78:"                    if (substr($ff, 0, 3) == "js:" && isset($post['p'][$k])) {";i:556;s:70:"                        $rf->params[$k] = "'" . @$post['p'][$k] . "'";";i:557;s:21:"                    }";i:558;s:17:"                }";i:559;s:13:"            }";i:560;s:0:"";i:561;s:23:"            $list = [];";i:562;s:60:"            $rawList = $rf->query(@$post['s'], $rf->params);";i:563;s:57:"            $rawList = is_null($rawList) ? [] : $rawList;";i:564;s:0:"";i:565;s:48:"            foreach ($rawList as $key => $val) {";i:566;s:27:"                $list[] = [";i:567;s:43:"                    'key' => $val['value'],";i:568;s:44:"                    'value' => $val['label']";i:569;s:18:"                ];";i:570;s:13:"            }";i:571;s:0:"";i:572;s:58:"            $count = $rf->count(@$post['s'], $rf->params);";i:573;s:0:"";i:574;s:30:"            echo json_encode([";i:575;s:32:"                'list' => $list,";i:576;s:34:"                'count' => $count,";i:577;s:33:"                's' => $post['s']";i:578;s:15:"            ]);";i:579;s:9:"        }";i:580;s:5:"    }";i:581;s:0:"";i:582;s:7:"    /**";i:583;s:13:"     * render";i:584;s:54:"     * Fungsi ini untuk me-render field dan atributnya";i:585;s:84:"     * @return mixed me-return sebuah field dan atribut datafilter dari hasil render";i:586;s:7:"     */";i:587;s:30:"    public function render() {";i:588;s:33:"        $this->processExpr(true);";i:589;s:60:"        return $this->renderInternal('template_render.php');";i:590;s:5:"    }";i:591;s:0:"";i:592;s:7:"    /**";i:593;s:61:"     * @return array me-return array hasil proses expression.";i:594;s:7:"     */";i:595;s:54:"    public function processExpr($fromRender = false) {";i:596;s:39:"        if (count($this->filters) == 0)";i:597;s:22:"            return [];";i:598;s:0:"";i:599;s:51:"        foreach ($this->filters as $k => $filter) {";i:600;s:44:"            switch ($filter['filterType']) {";i:601;s:28:"                case "list":";i:602;s:29:"                case "check":";i:603;s:88:"                    if (isset($filter['listExpr']) && trim($filter['listExpr']) != '') {";i:604;s:46:"                        ## evaluate expression";i:605;s:75:"                        $list = $this->evaluate($filter['listExpr'], true);";i:606;s:24:"                        ";i:607;s:91:"                        ## kalau listExpr ini berisi html, nanti bakal menghancurkan layout";i:608;s:87:"                        ## karena html nya itu masuk ke dalam json, dan bakal di render";i:609;s:90:"                        ## jadinya kita unset saja setelah di proses biar ga masuk ke json";i:610;s:20:"                    ";i:611;s:71:"                        ## change sequential array to associative array";i:612;s:74:"                        if (is_array($list) && !Helper::is_assoc($list)) {";i:613;s:58:"                            if (!isset($list[0]['key'])) {";i:614;s:63:"                                $list = Helper::toAssoc($list);";i:615;s:29:"                            }";i:616;s:25:"                        }";i:617;s:24:"                        ";i:618;s:58:"                        foreach ($list as $i=>$listItem) {";i:619;s:54:"                            if (is_array($listItem)) {";i:620;s:75:"                                foreach ($listItem as $l => $listSubItem) {";i:621;s:80:"                                    $list[$i][$l] = CHtml::encode($listSubItem);";i:622;s:33:"                                }";i:623;s:36:"                            } else {";i:624;s:69:"                                $list[$i] = CHtml::encode($listItem);";i:625;s:29:"                            }";i:626;s:25:"                        }";i:627;s:24:"                        ";i:628;s:45:"                        // if ($fromRender) {";i:629;s:67:"                        //     $this->filters[$k]['listExpr'] = "";";i:630;s:28:"                        // }";i:631;s:59:"                        $this->filters[$k]['list'] = $list;";i:632;s:22:"                    } ";i:633;s:26:"                    break;";i:634;s:32:"                case "relation":";i:635;s:44:"                    $rf = new RelationField;";i:636;s:56:"                    $rf->params = @$filter['relParams'];";i:637;s:64:"                    $rf->modelClass = @$filter['relModelClass'];";i:638;s:68:"                    $rf->relationCriteria = @$filter['relCriteria'];";i:639;s:85:"                    $rf->relationCriteria['limit'] = ActiveRecord::DEFAULT_PAGE_SIZE;";i:640;s:56:"                    $rf->relationCriteria['offset'] = 0;";i:641;s:0:"";i:642;s:58:"                    $rf->idField = @$filter['relIdField'];";i:643;s:64:"                    $rf->labelField = @$filter['relLabelField'];";i:644;s:50:"                    $rf->builder = $this->builder;";i:645;s:0:"";i:646;s:51:"                    $this->filters[$k]['list'] = 0;";i:647;s:52:"                    $this->filters[$k]['count'] = 0;";i:648;s:26:"                    break;";i:649;s:13:"            }";i:650;s:9:"        }";i:651;s:0:"";i:652;s:16:"        return [";i:653;s:39:"            'filters' => $this->filters";i:654;s:10:"        ];";i:655;s:5:"    }";i:656;s:0:"";i:657;s:1:"}";}s:7:"methods";a:14:{s:18:"getFilterOperators";a:2:{s:4:"line";i:63;s:6:"length";i:12;}s:14:"generateParams";a:2:{s:4:"line";i:76;s:6:"length";i:41;}s:13:"toSQLDateTime";a:2:{s:4:"line";i:118;s:6:"length";i:14;}s:8:"toSQLStr";a:2:{s:4:"line";i:134;s:6:"length";i:14;}s:9:"toSQLDate";a:2:{s:4:"line";i:149;s:6:"length";i:14;}s:16:"buildSingleParam";a:2:{s:4:"line";i:164;s:6:"length";i:211;}s:18:"getFieldProperties";a:2:{s:4:"line";i:379;s:6:"length";i:79;}s:9:"includeJS";a:2:{s:4:"line";i:462;s:6:"length";i:3;}s:10:"includeCSS";a:2:{s:4:"line";i:466;s:6:"length";i:3;}s:11:"datasources";a:2:{s:4:"line";i:470;s:6:"length";i:11;}s:13:"actionRelInit";a:2:{s:4:"line";i:482;s:6:"length";i:40;}s:13:"actionRelnext";a:2:{s:4:"line";i:523;s:6:"length";i:58;}s:6:"render";a:2:{s:4:"line";i:587;s:6:"length";i:4;}s:11:"processExpr";a:2:{s:4:"line";i:595;s:6:"length";i:61;}}}i:1;N;}