a:2:{i:0;a:3:{s:10:"sourceFile";s:61:"/var/www/html/plansys/components/ui/FormFields/DataSource.php";s:4:"file";a:1333:{i:0;s:5:"<?php";i:1;s:0:"";i:2;s:3:"/**";i:3;s:19:" * Class DataSource";i:4;s:16:" * @author rizky";i:5;s:3:" */";i:6;s:36:"class DataSource extends FormField {";i:7;s:0:"";i:8;s:47:"    public static $toolbarName = "Data Source";";i:9;s:49:"    public static $category    = "Data & Tables";";i:10;s:60:"    public static $toolbarIcon = "glyphicon glyphicon-book";";i:11;s:36:"    public $name               = '';";i:12;s:39:"    public $fieldType          = 'sql';";i:13;s:36:"    public $sql                = '';";i:14;s:36:"    public $php                = '';";i:15;s:39:"    public $postData           = 'Yes';";i:16;s:36:"    public $params             = [];";i:17;s:17:"    public $data;";i:18;s:38:"    public $debugSql           = 'No';";i:19;s:38:"    public $enablePaging       = 'No';";i:20;s:36:"    public $pagingSQL          = '';";i:21;s:36:"    public $pagingPHP          = '';";i:22;s:36:"    public $relationTo         = '';";i:23;s:36:"    public $queryParams        = [];";i:24;s:34:"    public $relationCriteria   = [";i:25;s:26:"        'select'    => '',";i:26;s:31:"        'distinct'  => 'false',";i:27;s:27:"        'alias'     => 't',";i:28;s:35:"        'condition' => '{[where]}',";i:29;s:35:"        'order'     => '{[order]}',";i:30;s:36:"        'paging'    => '{[paging]}',";i:31;s:26:"        'group'     => '',";i:32;s:26:"        'having'    => '',";i:33;s:25:"        'join'      => ''";i:34;s:6:"    ];";i:35;s:36:"    public $aggregateGroups    = [];";i:36;s:40:"    public $execMode           = 'auto';";i:37;s:39:"    public $cacheQuery         = 'No'; ";i:38;s:36:"    public $aggregateColumns   = [];";i:39;s:36:"    public $maxAggregateLevel  = 99;";i:40;s:36:"    public $options            = [];";i:41;s:44:"    public $pkCol              = '--auto--';";i:42;s:36:"    private $postedParams      = [];";i:43;s:35:"    private $lastCount         = 0;";i:44;s:21:"    private $command;";i:45;s:24:"    private $dataFilter;";i:46;s:0:"";i:47;s:78:"    public static function querySql($sql, $params, $form = '', $dsname = '') {";i:48;s:29:"        $ds = new DataSource;";i:49;s:0:"";i:50;s:26:"        if ($form != '') {";i:51;s:52:"            $fb          = FormBuilder::load($form);";i:52;s:31:"            $ds->builder = $fb;";i:53;s:0:"";i:54;s:32:"            if ($dsname != '') {";i:55;s:66:"                $field      = $fb->findField(['name' => $dsname]);";i:56;s:47:"                $ds->params = $field['params'];";i:57;s:13:"            }";i:58;s:9:"        }";i:59;s:0:"";i:60;s:24:"        $ds->sql = $sql;";i:61;s:35:"        return $ds->query($params);";i:62;s:5:"    }";i:63;s:0:"";i:64;s:7:"    /**";i:65;s:62:"     * @param string $sql parameter query yang akan di-execute";i:66;s:130:"     * @return mixed me-return array kosong jika parameter $sql == "", jika tidak maka akan me-return array data hasil execute SQL";i:67;s:7:"     */";i:68;s:57:"    public function query($params = [], $debug = false) {";i:69;s:29:"        $paramDefs = $params;";i:70;s:62:"        $params    = array_merge($params, $this->queryParams);";i:71;s:0:"";i:72;s:35:"        if (trim($this->sql) == "")";i:73;s:22:"            return [];";i:74;s:0:"";i:75;s:35:"        $db       = Yii::app()->db;";i:76;s:89:"        $template = DataSource::generateTemplate($this->sql, $params, $this, $paramDefs);";i:77;s:8:"        ";i:78;s:22:"        ## execute SQL";i:79;s:62:"        $this->command = $db->createCommand($template['sql']);";i:80;s:77:"        $data          = $this->command->queryAll(true, $template['params']);";i:81;s:0:"";i:82;s:0:"";i:83;s:21:"        if ($debug) {";i:84;s:72:"            $template['sql'] = [SqlFormatter::format($template['sql'])];";i:85;s:9:"        }";i:86;s:8:"        ";i:87;s:40:"        ## if should count, then count..";i:88;s:36:"        if ($this->lastCount == 0) {";i:89;s:47:"            if ($this->enablePaging == 'Yes') {";i:90;s:85:"                $tc = DataSource::generateTemplate($this->pagingSQL, $params, $this);";i:91;s:0:"";i:92;s:87:"                $count = $db->createCommand($tc['sql'])->queryAll(true, $tc['params']);";i:93;s:40:"                if (count($count) > 0) {";i:94;s:53:"                    $count = array_values($count[0]);";i:95;s:39:"                    $count = $count[0];";i:96;s:24:"                } else {";i:97;s:31:"                    $count = 0;";i:98;s:17:"                }";i:99;s:29:"                if ($debug) {";i:100;s:86:"                    array_unshift($template['sql'], SqlFormatter::format($tc['sql']));";i:101;s:17:"                }";i:102;s:20:"            } else {";i:103;s:38:"                $count = count($data);";i:104;s:13:"            }";i:105;s:16:"        } else {";i:106;s:38:"            $count = $this->lastCount;";i:107;s:0:"";i:108;s:43:"            ## default shouldcount to true;";i:109;s:33:"            $this->lastCount = 0;";i:110;s:9:"        }";i:111;s:0:"";i:112;s:40:"        $template['count']     = $count;";i:113;s:53:"        $template['timestamp'] = date('Y-m-d H:i:s');";i:114;s:8:"        ";i:115;s:8:"        ";i:116;s:22:"        ## return data";i:117;s:16:"        return [";i:118;s:29:"            'data'  => $data,";i:119;s:30:"            'count' => $count,";i:120;s:33:"            'debug' => $template,";i:121;s:10:"        ];";i:122;s:5:"    }";i:123;s:4:"    ";i:124;s:64:"    private static function processSubBlock($rawBlock,$params) {";i:125;s:80:"        preg_match_all(Helper::nestedParensRegex('{', '}'), $rawBlock, $blocks);";i:126;s:8:"        ";i:127;s:48:"        $returnParams = $params['returnParams'];";i:128;s:52:"        if (empty($blocks[1])) { return $rawBlock; }";i:129;s:8:"        ";i:130;s:40:"        foreach ($blocks[1] as $block) {";i:131;s:33:"            $renderBlock = false;";i:132;s:12:"            ";i:133;s:68:"            preg_match_all("/\:[\w\d_]+/", $block, $attachedParams);";i:134;s:12:"            ";i:135;s:48:"            if (count($attachedParams[0]) > 0) {";i:136;s:30:"                $inParams = 0;";i:137;s:53:"                foreach ($attachedParams[0] as $ap) {";i:138;s:80:"                    if (isset($returnParams[$ap]) && $returnParams[$ap] != "") {";i:139;s:36:"                        $inParams++;";i:140;s:24:"                        ";i:141;s:88:"                        ## if current params is an ARRAY then convert to multiple params";i:142;s:89:"                        if (is_array($returnParams[$ap]) && !empty($returnParams[$ap])) {";i:143;s:49:"                            $newParamString = [];";i:144;s:75:"                            foreach ($returnParams[$ap] as $rpIdx => $rp) {";i:145;s:75:"                                $rpKey                = $ap . "_" . $rpIdx;";i:146;s:63:"                                $newParamString[]     = $rpKey;";i:147;s:60:"                                $returnParams[$rpKey] = $rp;";i:148;s:29:"                            }";i:149;s:54:"                            unset($returnParams[$ap]);";i:150;s:123:"                            $bracket['sql'] = Helper::strReplaceFirst($ap, implode(",", $newParamString), $bracket['sql']);";i:151;s:25:"                        }";i:152;s:21:"                    }";i:153;s:17:"                }";i:154;s:16:"                ";i:155;s:16:"                ";i:156;s:58:"                if ($inParams >= count($attachedParams)) {";i:157;s:40:"                    $renderBlock = true;";i:158;s:17:"                }";i:159;s:13:"            }";i:160;s:12:"            ";i:161;s:32:"            if (!$renderBlock) {";i:162;s:75:"                $rawBlock = str_replace("{" . $block . "}", "", $rawBlock);";i:163;s:20:"            } else {";i:164;s:79:"                $rawBlock = str_replace("{" . $block . "}", $block, $rawBlock);";i:165;s:13:"            }";i:166;s:9:"        }";i:167;s:8:"        ";i:168;s:25:"        return $rawBlock;";i:169;s:8:"        ";i:170;s:5:"    }";i:171;s:0:"";i:172;s:96:"    public static function generateTemplate($sql, $postedParams = [], $field, $paramDefs = []) {";i:173;s:27:"        $returnParams = [];";i:174;s:8:"        ";i:175;s:26:"        ## find all params";i:176;s:54:"        preg_match_all("/\:[\w\d_]+/", $sql, $params);";i:177;s:28:"        $originalSql = $sql;";i:178;s:37:"        $model       = $field->model;";i:179;s:44:"        foreach ($params[0] as $idx => $p) {";i:180;s:43:"            if (isset($postedParams[$p])) {";i:181;s:52:"                if (is_numeric($postedParams[$p])) {";i:182;s:58:"                    $returnParams[$p] = $postedParams[$p];";i:183;s:24:"                } else {";i:184;s:55:"                    if (is_string($postedParams[$p])) {";i:185;s:145:"                        $isJs = strpos($postedParams[$p], 'js:') !== false || (isset($paramDefs[$p]) && strpos($paramDefs[$p], 'js:') !== false);";i:186;s:0:"";i:187;s:109:"                        if (!$isJs && isset($field->params[$p]) && strpos($field->params[$p], 'js:') === 0) {";i:188;s:41:"                            $isJs = true;";i:189;s:25:"                        }";i:190;s:0:"";i:191;s:36:"                        if ($isJs) {";i:192;s:56:"                            switch (get_class($field)) {";i:193;s:50:"                                case "DataSource":";i:194;s:81:"                                    $returnParams[$p] = @$field->queryParams[$p];";i:195;s:42:"                                    break;";i:196;s:40:"                                default:";i:197;s:59:"                                    $returnParams[$p] = '';";i:198;s:42:"                                    break;";i:199;s:29:"                            }";i:200;s:32:"                        } else {";i:201;s:59:"                            $postParam = $postedParams[$p];";i:202;s:68:"                            if (stripos($postParam, 'php:') === 0) {";i:203;s:67:"                                $postParam = substr($postParam, 4);";i:204;s:29:"                            }";i:205;s:76:"                            if (is_string($postParam) && $postParam != "") {";i:206;s:88:"                                $returnParams[$p] = $field->evaluate($postParam, true, [";i:207;s:54:"                                    'model' => $model,";i:208;s:89:"                                    'params' => @$field->builder->renderOptions['params']";i:209;s:35:"                                ]);";i:210;s:29:"                            }";i:211;s:25:"                        }";i:212;s:90:"                    } else if (is_array($postedParams[$p]) && !empty($postedParams[$p])) {";i:213;s:62:"                        $returnParams[$p] = $postedParams[$p];";i:214;s:45:"                        $params[0][$idx]  = [";i:215;s:43:"                            'name'   => $p,";i:216;s:64:"                            'length' => count($postedParams[$p])";i:217;s:26:"                        ];";i:218;s:21:"                    }";i:219;s:17:"                }";i:220;s:13:"            }";i:221;s:9:"        }";i:222;s:0:"";i:223;s:26:"        ## find all blocks";i:224;s:77:"        preg_match_all( Helper::nestedParensRegex('{', '}'), $sql, $blocks );";i:225;s:8:"        ";i:226;s:40:"        foreach ($blocks[1] as $block) {";i:227;s:76:"            if (strtolower($block) == "and" || strtolower($block) == "or") {";i:228;s:25:"                continue;";i:229;s:13:"            }";i:230;s:12:"            ";i:231;s:36:"            $originalBlock = $block;";i:232;s:58:"            $block = DataSource::processSubBlock($block, [";i:233;s:48:"                'postedParams' => $postedParams,";i:234;s:47:"                'returnParams' => $returnParams";i:235;s:15:"            ]);";i:236;s:73:"            $sql = str_replace("{{$originalBlock}}", "{{$block}}", $sql);";i:237;s:12:"            ";i:238;s:84:"            $bracket = DataSource::processSQLBracket($block, $postedParams, $field);";i:239;s:12:"            ";i:240;s:35:"            $renderBracket = false;";i:241;s:44:"            if (isset($bracket['render'])) {";i:242;s:52:"                $renderBracket = $bracket['render'];";i:243;s:13:"            }";i:244;s:12:"            ";i:245;s:12:"            ";i:246;s:76:"            foreach ($bracket['params'] as $bracketParam => $bracketValue) {";i:247;s:74:"                if (is_array($bracketValue) && count($bracketValue) > 0) {";i:248;s:42:"                    $renderBracket = true;";i:249;s:57:"                    foreach ($bracketValue as $k => $p) {";i:250;s:47:"                        $returnParams[$k] = $p;";i:251;s:21:"                    }";i:252;s:17:"                }";i:253;s:13:"            }";i:254;s:12:"            ";i:255;s:47:"            ## check if there is another params";i:256;s:77:"            preg_match_all("/\:[\w\d_]+/", $bracket['sql'], $attachedParams);";i:257;s:12:"            ";i:258;s:48:"            if (count($attachedParams[0]) > 0) {";i:259;s:30:"                $inParams = 0;";i:260;s:53:"                foreach ($attachedParams[0] as $ap) {";i:261;s:80:"                    if (isset($returnParams[$ap]) && $returnParams[$ap] != "") {";i:262;s:36:"                        $inParams++;";i:263;s:24:"                        ";i:264;s:88:"                        ## if current params is an ARRAY then convert to multiple params";i:265;s:89:"                        if (is_array($returnParams[$ap]) && !empty($returnParams[$ap])) {";i:266;s:49:"                            $newParamString = [];";i:267;s:75:"                            foreach ($returnParams[$ap] as $rpIdx => $rp) {";i:268;s:75:"                                $rpKey                = $ap . "_" . $rpIdx;";i:269;s:63:"                                $newParamString[]     = $rpKey;";i:270;s:60:"                                $returnParams[$rpKey] = $rp;";i:271;s:29:"                            }";i:272;s:54:"                            unset($returnParams[$ap]);";i:273;s:123:"                            $bracket['sql'] = Helper::strReplaceFirst($ap, implode(",", $newParamString), $bracket['sql']);";i:274;s:25:"                        }";i:275;s:21:"                    }";i:276;s:17:"                }";i:277;s:16:"                ";i:278;s:58:"                if ($inParams >= count($attachedParams)) {";i:279;s:42:"                    $renderBracket = true;";i:280;s:17:"                }";i:281;s:13:"            }";i:282;s:16:"                ";i:283;s:33:"            if ($renderBracket) {";i:284;s:54:"                if (strtolower($block) == '[where]') {";i:285;s:65:"                    $isNotFirst = strpos($sql, "{{$block}}") > 0;";i:286;s:61:"                    $isSelect = stripos($sql, "select") == 0;";i:287;s:20:"                    ";i:288;s:92:"                    if (!$isSelect && $isNotFirst && stripos($bracket['sql'], 'where') == 0)";i:289;s:79:"                        $bracket['sql'] = " AND " . substr($bracket['sql'], 5);";i:290;s:17:"                }";i:291;s:16:"                ";i:292;s:72:"                $sql = str_replace("{{$block}}", $bracket['sql'], $sql);";i:293;s:20:"            } else {";i:294;s:59:"                $sql = str_replace("{{$block}}", "", $sql);";i:295;s:13:"            }";i:296;s:9:"        }";i:297;s:8:"        ";i:298;s:44:"        ## concat 'WHERE' sql with operators";i:299;s:25:"        if ($sql != "") {";i:300;s:54:"            $sql = DataSource::concatSql($sql, "AND");";i:301;s:53:"            $sql = DataSource::concatSql($sql, "OR");";i:302;s:9:"        }";i:303;s:12:"            ";i:304;s:39:"        ## remove uneeded return params";i:305;s:50:"        preg_match_all("/\:[\w\d_]+/", $sql, $cp);";i:306;s:8:"        ";i:307;s:45:"        foreach ($returnParams as $k => $p) {";i:308;s:89:"            if (!in_array($k, $cp[0]) && ($k[0] != ":" && !in_array(':' . $k, $cp[0]))) {";i:309;s:41:"                unset($returnParams[$k]);";i:310;s:13:"            }";i:311;s:0:"";i:312;s:105:"            if ((is_null($p) && strpos(@$postedParams[$k], "js:") === 0) || strpos($sql, $k) === false) {";i:313;s:41:"                unset($returnParams[$k]);";i:314;s:13:"            }";i:315;s:9:"        }";i:316;s:0:"";i:317;s:16:"        return [";i:318;s:35:"            'sql'    => trim($sql),";i:319;s:37:"            'params' => $returnParams";i:320;s:10:"        ];";i:321;s:5:"    }";i:322;s:0:"";i:323;s:66:"    // HANYA MEMPROSES SQL BRACKET []!! TIDAK MEMPROSES PARAMETERS";i:324;s:78:"    protected static function processSQLBracket($sql, $postedParams, $field) {";i:325;s:54:"        preg_match_all("/\[(.*?)\]/", $sql, $matches);";i:326;s:30:"        $params = $matches[1];";i:327;s:21:"        $parsed = [];";i:328;s:0:"";i:329;s:37:"        foreach ($params as $param) {";i:330;s:33:"            $template     = $sql;";i:331;s:49:"            $paramOptions = explode("|", $param);";i:332;s:55:"            $param        = array_shift($paramOptions);";i:333;s:0:"";i:334;s:178:"            if (($param != "order" && $param != "!order" && $param != "where" && $param != "paging") && (!isset($field->params[$param]) && !isset($field->queryParams[$param]))) {";i:335;s:70:"                $sql            = str_replace("[{$param}]", "", $sql);";i:336;s:37:"                $parsed[$param] = "";";i:337;s:25:"                continue;";i:338;s:13:"            }";i:339;s:0:"";i:340;s:0:"";i:341;s:29:"            switch ($param) {";i:342;s:29:"                case "where":";i:343;s:108:"                    $fieldSql = 'DataFilter::generateParams($paramName, $params, $template, $paramOptions)';";i:344;s:26:"                    break;";i:345;s:29:"                case "order":";i:346;s:30:"                case "!order":";i:347;s:30:"                case "paging":";i:348;s:45:"                    if ($param == "!order") {";i:349;s:41:"                        $param = "order";";i:350;s:21:"                    }";i:351;s:0:"";i:352;s:106:"                    $fieldSql = 'DataGrid::generateParams($paramName, $params, $template, $paramOptions)';";i:353;s:26:"                    break;";i:354;s:24:"                default:";i:355;s:95:"                    $ff       = $field->builder->findField(['name' => $field->params[$param]]);";i:356;s:61:"                    $fieldSql = @$ff['options']['ps-ds-sql'];";i:357;s:26:"                    break;";i:358;s:13:"            }";i:359;s:0:"";i:360;s:0:"";i:361;s:35:"            if (isset($fieldSql)) {";i:362;s:63:"                $template = $field->evaluate($fieldSql, true, [";i:363;s:45:"                    'paramName'    => $param,";i:364;s:61:"                    'params'       => @$postedParams[$param],";i:365;s:48:"                    'template'     => $template,";i:366;s:51:"                    'paramOptions' => $paramOptions";i:367;s:19:"                ]);";i:368;s:60:"                if (!isset($template['generateTemplate'])) {";i:369;s:77:"                    $sql = str_replace("[{$param}]", $template['sql'], $sql);";i:370;s:24:"                } else {";i:371;s:44:"                    $sql = $template['sql'];";i:372;s:17:"                }";i:373;s:0:"";i:374;s:45:"                if ($template['sql'] != '') {";i:375;s:58:"                    $parsed[$param] = $template['params'];";i:376;s:17:"                }";i:377;s:0:"";i:378;s:49:"                if (isset($template['render'])) {";i:379;s:97:"                    return ['sql' => $sql, 'params' => $parsed, 'render' => $template['render']];";i:380;s:17:"                }";i:381;s:13:"            }";i:382;s:9:"        }";i:383;s:52:"        return ['sql' => $sql, 'params' => $parsed];";i:384;s:5:"    }";i:385;s:0:"";i:386;s:55:"    public static function concatSql($sql, $operator) {";i:387;s:92:"        $andsql = array_filter(preg_split("/\{" . $operator . "\}/i", $sql), function ($e) {";i:388;s:55:"            return (trim($e) != "" ? trim($e) : false);";i:389;s:11:"        });";i:390;s:0:"";i:391;s:55:"        $sql = implode(" " . $operator . " ", $andsql);";i:392;s:0:"";i:393;s:28:"        ## clean where where";i:394;s:89:"        $sql = preg_replace("/\s+{$operator}\s+where\s+/i", " " . $operator . " ", $sql);";i:395;s:77:"        $sql = preg_replace("/\s+where\s+{$operator}\s+/i", " WHERE ", $sql);";i:396;s:71:"        $sql = preg_replace("/\s+where\s+where\s+/i", " WHERE ", $sql);";i:397;s:0:"";i:398;s:24:"        ## clean and and";i:399;s:95:"        $sql = preg_replace("/\s+{$operator}\s+{$operator}\s+/i", " " . $operator . " ", $sql);";i:400;s:0:"";i:401;s:22:"        ## clean ( AND";i:402;s:70:"        $sql = preg_replace("/\s*\(\s+{$operator}\s+/i", " ( ", $sql);";i:403;s:70:"        $sql = preg_replace("/\s+{$operator}\s+\)\s+/i", " ) ", $sql);";i:404;s:20:"        return $sql;";i:405;s:5:"    }";i:406;s:0:"";i:407;s:7:"    /**";i:408;s:73:"     * @return array Fungsi ini akan me-return array property DataSource.";i:409;s:7:"     */";i:410;s:42:"    public function getFieldProperties() {";i:411;s:22:"        return array (";i:412;s:19:"            array (";i:413;s:46:"                'label' => 'Data Source Name',";i:414;s:33:"                'name' => 'name',";i:415;s:36:"                'labelWidth' => '5',";i:416;s:36:"                'fieldWidth' => '7',";i:417;s:36:"                'options' => array (";i:418;s:48:"                    'ng-model' => 'active.name',";i:419;s:56:"                    'ng-change' => 'changeActiveName()',";i:420;s:40:"                    'ng-delay' => '500',";i:421;s:18:"                ),";i:422;s:38:"                'type' => 'TextField',";i:423;s:14:"            ),";i:424;s:19:"            array (";i:425;s:41:"                'label' => 'Post Data ?',";i:426;s:37:"                'name' => 'postData',";i:427;s:36:"                'options' => array (";i:428;s:52:"                    'ng-model' => 'active.postData',";i:429;s:44:"                    'ng-change' => 'save()',";i:430;s:18:"                ),";i:431;s:54:"                'listExpr' => 'array(\'Yes\',\'No\')',";i:432;s:36:"                'labelWidth' => '5',";i:433;s:36:"                'fieldWidth' => '4',";i:434;s:41:"                'type' => 'DropDownList',";i:435;s:14:"            ),";i:436;s:19:"            array (";i:437;s:46:"                'label' => 'Post Relation To',";i:438;s:39:"                'name' => 'relationTo',";i:439;s:36:"                'options' => array (";i:440;s:54:"                    'ng-model' => 'active.relationTo',";i:441;s:44:"                    'ng-change' => 'save()',";i:442;s:48:"                    'ps-list' => 'relFieldList',";i:443;s:60:"                    'ng-if' => 'active.postData == \'Yes\'',";i:444;s:18:"                ),";i:445;s:35:"                'list' => array (),";i:446;s:36:"                'labelWidth' => '5',";i:447;s:36:"                'fieldWidth' => '7',";i:448;s:38:"                'searchable' => 'Yes',";i:449;s:45:"                'otherLabel' => '-- NONE --',";i:450;s:41:"                'type' => 'DropDownList',";i:451;s:14:"            ),";i:452;s:19:"            array (";i:453;s:33:"                'type' => 'Text',";i:454;s:73:"                'value' => '<hr ng-if=\\"active.postData == \'Yes\'\\">',";i:455;s:14:"            ),";i:456;s:19:"            array (";i:457;s:41:"                'label' => 'Debug SQL ?',";i:458;s:37:"                'name' => 'debugSql',";i:459;s:36:"                'options' => array (";i:460;s:52:"                    'ng-model' => 'active.debugSql',";i:461;s:44:"                    'ng-change' => 'save()',";i:462;s:18:"                ),";i:463;s:54:"                'listExpr' => 'array(\'Yes\',\'No\')',";i:464;s:36:"                'labelWidth' => '5',";i:465;s:36:"                'fieldWidth' => '4',";i:466;s:41:"                'type' => 'DropDownList',";i:467;s:14:"            ),";i:468;s:19:"            array (";i:469;s:41:"                'label' => 'Source Type',";i:470;s:38:"                'name' => 'fieldType',";i:471;s:36:"                'options' => array (";i:472;s:53:"                    'ng-model' => 'active.fieldType',";i:473;s:44:"                    'ng-change' => 'save()',";i:474;s:88:"                    'ng-if' => 'active.relationTo == \'\' || active.postData == \'No\'',";i:475;s:18:"                ),";i:476;s:33:"                'list' => array (";i:477;s:35:"                    'sql' => 'SQL',";i:478;s:51:"                    'phpsql' => 'PHP (Return SQL)',";i:479;s:50:"                    'php' => 'PHP (Return Array)',";i:480;s:18:"                ),";i:481;s:36:"                'labelWidth' => '5',";i:482;s:36:"                'fieldWidth' => '6',";i:483;s:41:"                'type' => 'DropDownList',";i:484;s:14:"            ),";i:485;s:19:"            array (";i:486;s:36:"                'label' => 'Paging',";i:487;s:41:"                'name' => 'enablePaging',";i:488;s:36:"                'options' => array (";i:489;s:56:"                    'ng-model' => 'active.enablePaging',";i:490;s:44:"                    'ng-change' => 'save()',";i:491;s:88:"                    'ng-if' => 'active.relationTo == \'\' || active.postData == \'No\'',";i:492;s:18:"                ),";i:493;s:54:"                'listExpr' => 'array(\'Yes\',\'No\')',";i:494;s:36:"                'labelWidth' => '5',";i:495;s:36:"                'fieldWidth' => '4',";i:496;s:41:"                'type' => 'DropDownList',";i:497;s:14:"            ),";i:498;s:19:"            array (";i:499;s:45:"                'name' => 'relationCriteria',";i:500;s:44:"                'label' => 'Relation Query',";i:501;s:42:"                'paramsField' => 'params',";i:502;s:44:"                'baseClass' => 'DataSource',";i:503;s:36:"                'options' => array (";i:504;s:89:"                    'ng-if' => 'active.postData == \'Yes\' && active.relationTo != \'\'',";i:505;s:60:"                    'ng-model' => 'active.relationCriteria',";i:506;s:44:"                    'ng-change' => 'save()',";i:507;s:18:"                ),";i:508;s:68:"                'modelClassJS' => 'DataSource/relation-criteria.js',";i:509;s:40:"                'type' => 'SqlCriteria',";i:510;s:14:"            ),";i:511;s:19:"            array (";i:512;s:33:"                'label' => 'SQL',";i:513;s:37:"                'fieldname' => 'sql',";i:514;s:36:"                'language' => 'sql',";i:515;s:36:"                'options' => array (";i:516;s:123:"                    'ng-show' => 'active.fieldType == \'sql\' && (active.relationTo == \'\' || active.postData == \'No\')',";i:517;s:44:"                    'ps-valid' => 'save();',";i:518;s:18:"                ),";i:519;s:44:"                'type' => 'ExpressionField',";i:520;s:14:"            ),";i:521;s:19:"            array (";i:522;s:42:"                'label' => 'PHP Function',";i:523;s:37:"                'fieldname' => 'php',";i:524;s:36:"                'options' => array (";i:525;s:159:"                    'ng-show' => '(active.fieldType == \'php\' || active.fieldType == \'phpsql\') && (active.relationTo == \'\' || active.postData == \'No\')',";i:526;s:44:"                    'ps-valid' => 'save();',";i:527;s:18:"                ),";i:528;s:62:"                'desc' => 'ex: Model::yourFunction($params);',";i:529;s:44:"                'type' => 'ExpressionField',";i:530;s:14:"            ),";i:531;s:19:"            array (";i:532;s:55:"                'label' => 'Total Item - PHP Function',";i:533;s:43:"                'fieldname' => 'pagingPHP',";i:534;s:36:"                'options' => array (";i:535;s:193:"                    'ng-show' => '(active.fieldType == \'php\' || active.fieldType == \'phpsql\') && active.enablePaging == \'Yes\' && (active.relationTo == \'\' || active.postData == \'No\')',";i:536;s:44:"                    'ps-valid' => 'save();',";i:537;s:18:"                ),";i:538;s:62:"                'desc' => 'ex: Model::yourFunction($params);',";i:539;s:44:"                'type' => 'ExpressionField',";i:540;s:14:"            ),";i:541;s:19:"            array (";i:542;s:46:"                'label' => 'Total Item - SQL',";i:543;s:43:"                'fieldname' => 'pagingSQL',";i:544;s:36:"                'language' => 'sql',";i:545;s:36:"                'options' => array (";i:546;s:157:"                    'ng-show' => 'active.fieldType == \'sql\' && active.enablePaging == \'Yes\' && (active.relationTo == \'\' || active.postData == \'No\')',";i:547;s:44:"                    'ps-valid' => 'save();',";i:548;s:18:"                ),";i:549;s:44:"                'type' => 'ExpressionField',";i:550;s:14:"            ),";i:551;s:19:"            array (";i:552;s:40:"                'label' => 'Parameters',";i:553;s:35:"                'name' => 'params',";i:554;s:33:"                'show' => 'Show',";i:555;s:41:"                'type' => 'KeyValueGrid',";i:556;s:14:"            ),";i:557;s:19:"            array (";i:558;s:42:"                'title' => 'Optimization',";i:559;s:42:"                'type' => 'SectionHeader',";i:560;s:14:"            ),";i:561;s:19:"            array (";i:562;s:33:"                'type' => 'Text',";i:563;s:65:"                'value' => '<div style=\\"height:5px;\\"></div>',";i:564;s:14:"            ),";i:565;s:19:"            array (";i:566;s:37:"                'label' => 'Execute',";i:567;s:37:"                'name' => 'execMode',";i:568;s:36:"                'options' => array (";i:569;s:52:"                    'ng-model' => 'active.execMode',";i:570;s:44:"                    'ng-change' => 'save()',";i:571;s:18:"                ),";i:572;s:42:"                'menuPos' => 'pull-right',";i:573;s:32:"                'listExpr' => '[";i:574;s:32:"  \'auto\' => \'Automatically\',";i:575;s:21:"  \'---\' => \'---\',";i:576;s:50:"  \'before\' => \'Before Render + Param Changed\',";i:577;s:48:"  \'after\' => \'After Render + Param Changed\',";i:578;s:20:"  \'--\' => \'---\',";i:579;s:37:"  \'manual\' => \'Manually (via JS)\'";i:580;s:3:"]',";i:581;s:36:"                'labelWidth' => '3',";i:582;s:36:"                'fieldWidth' => '9',";i:583;s:41:"                'type' => 'DropDownList',";i:584;s:14:"            ),";i:585;s:19:"            array (";i:586;s:35:"                'label' => 'Cache',";i:587;s:39:"                'name' => 'cacheQuery',";i:588;s:36:"                'options' => array (";i:589;s:54:"                    'ng-model' => 'active.cacheQuery',";i:590;s:44:"                    'ng-change' => 'save()',";i:591;s:18:"                ),";i:592;s:32:"                'listExpr' => '[";i:593;s:10:"   \'No\',";i:594;s:10:"   \'Yes\'";i:595;s:3:"]',";i:596;s:36:"                'labelWidth' => '3',";i:597;s:36:"                'fieldWidth' => '3',";i:598;s:41:"                'type' => 'DropDownList',";i:599;s:14:"            ),";i:600;s:19:"            array (";i:601;s:48:"                'label' => 'Datasource Options',";i:602;s:36:"                'name' => 'options',";i:603;s:33:"                'show' => 'Show',";i:604;s:41:"                'type' => 'KeyValueGrid',";i:605;s:14:"            ),";i:606;s:19:"            array (";i:607;s:33:"                'type' => 'Text',";i:608;s:93:"                'value' => '<div ng-if=\'active.postData == \"Yes\" && !!active.relationTo\'>";i:609;s:4:"    ";i:610;s:87:"    <div ng-init=\"active.$showGrouping = active.aggregateGroups.length == 0\"></div>',";i:611;s:14:"            ),";i:612;s:19:"            array (";i:613;s:73:"                'title' => 'Grouping: {{ active.aggregateGroups.length }}";i:614;s:13:"    item(s)',";i:615;s:42:"                'type' => 'SectionHeader',";i:616;s:14:"            ),";i:617;s:19:"            array (";i:618;s:34:"                'label' => 'Hide',";i:619;s:39:"                'icon' => 'chevron-up',";i:620;s:38:"                'position' => 'right',";i:621;s:41:"                'buttonSize' => 'btn-xs',";i:622;s:36:"                'options' => array (";i:623;s:81:"                    'ng-click' => 'active.$showGrouping = !active.$showGrouping',";i:624;s:51:"                    'style' => 'margin-top:-25px;',";i:625;s:54:"                    'ng-if' => 'active.$showGrouping',";i:626;s:18:"                ),";i:627;s:39:"                'type' => 'LinkButton',";i:628;s:14:"            ),";i:629;s:19:"            array (";i:630;s:34:"                'label' => 'Edit',";i:631;s:41:"                'icon' => 'chevron-down',";i:632;s:38:"                'position' => 'right',";i:633;s:41:"                'buttonSize' => 'btn-xs',";i:634;s:36:"                'options' => array (";i:635;s:81:"                    'ng-click' => 'active.$showGrouping = !active.$showGrouping',";i:636;s:51:"                    'style' => 'margin-top:-25px;',";i:637;s:55:"                    'ng-if' => '!active.$showGrouping',";i:638;s:18:"                ),";i:639;s:39:"                'type' => 'LinkButton',";i:640;s:14:"            ),";i:641;s:19:"            array (";i:642;s:33:"                'type' => 'Text',";i:643;s:95:"                'value' => '<div ng-if=\\"active.$showGrouping\\" style=\\"margin-top:5px\\">',";i:644;s:14:"            ),";i:645;s:19:"            array (";i:646;s:50:"                'label' => 'Max. Aggregate Level',";i:647;s:46:"                'name' => 'maxAggregateLevel',";i:648;s:36:"                'labelWidth' => '7',";i:649;s:36:"                'fieldWidth' => '5',";i:650;s:37:"                'postfix' => 'level',";i:651;s:36:"                'options' => array (";i:652;s:61:"                    'ng-model' => 'active.maxAggregateLevel',";i:653;s:40:"                    'ng-delay' => '500',";i:654;s:45:"                    'ng-change' => 'save();',";i:655;s:39:"                    'ng-if' => 'false',";i:656;s:18:"                ),";i:657;s:41:"                'labelOptions' => array (";i:658;s:50:"                    'style' => 'text-align:left;',";i:659;s:18:"                ),";i:660;s:38:"                'type' => 'TextField',";i:661;s:14:"            ),";i:662;s:19:"            array (";i:663;s:44:"                'name' => 'aggregateGroups',";i:664;s:42:"                'fieldTemplate' => 'form',";i:665;s:98:"                'templateForm' => 'application.components.ui.FormFields.DataSourceAggregateGroup',";i:666;s:36:"                'options' => array (";i:667;s:59:"                    'ng-model' => 'active.aggregateGroups',";i:668;s:44:"                    'ng-change' => 'save()',";i:669;s:18:"                ),";i:670;s:35:"                'sortable' => 'No',";i:671;s:45:"                'singleViewOption' => array (";i:672;s:36:"                    'name' => 'val',";i:673;s:42:"                    'fieldType' => 'text',";i:674;s:38:"                    'labelWidth' => 0,";i:675;s:39:"                    'fieldWidth' => 12,";i:676;s:45:"                    'fieldOptions' => array (";i:677;s:42:"                        'ng-delay' => 500,";i:678;s:22:"                    ),";i:679;s:18:"                ),";i:680;s:37:"                'type' => 'ListView',";i:681;s:14:"            ),";i:682;s:19:"            array (";i:683;s:33:"                'type' => 'Text',";i:684;s:34:"                'value' => '</div>";i:685;s:32:"<div style=\"height:5px\"></div>";i:686;s:51:"<div ng-if=\"active.aggregateGroups.length > 0\">',";i:687;s:14:"            ),";i:688;s:19:"            array (";i:689;s:76:"                'title' => 'Aggregates: {{ active.aggregateColumns.length }}";i:690;s:13:"    item(s)',";i:691;s:42:"                'type' => 'SectionHeader',";i:692;s:14:"            ),";i:693;s:19:"            array (";i:694;s:34:"                'label' => 'Edit',";i:695;s:41:"                'icon' => 'chevron-down',";i:696;s:38:"                'position' => 'right',";i:697;s:41:"                'buttonSize' => 'btn-xs',";i:698;s:36:"                'options' => array (";i:699;s:83:"                    'ng-click' => 'active.$showAggregate = !active.$showAggregate',";i:700;s:51:"                    'style' => 'margin-top:-25px;',";i:701;s:56:"                    'ng-if' => '!active.$showAggregate',";i:702;s:18:"                ),";i:703;s:39:"                'type' => 'LinkButton',";i:704;s:14:"            ),";i:705;s:19:"            array (";i:706;s:34:"                'label' => 'Hide',";i:707;s:39:"                'icon' => 'chevron-up',";i:708;s:38:"                'position' => 'right',";i:709;s:41:"                'buttonSize' => 'btn-xs',";i:710;s:36:"                'options' => array (";i:711;s:83:"                    'ng-click' => 'active.$showAggregate = !active.$showAggregate',";i:712;s:51:"                    'style' => 'margin-top:-25px;',";i:713;s:55:"                    'ng-if' => 'active.$showAggregate',";i:714;s:18:"                ),";i:715;s:39:"                'type' => 'LinkButton',";i:716;s:14:"            ),";i:717;s:19:"            array (";i:718;s:33:"                'type' => 'Text',";i:719;s:96:"                'value' => '<div ng-if=\\"active.$showAggregate\\" style=\\"margin-top:5px\\">',";i:720;s:14:"            ),";i:721;s:19:"            array (";i:722;s:45:"                'name' => 'aggregateColumns',";i:723;s:42:"                'fieldTemplate' => 'form',";i:724;s:96:"                'templateForm' => 'application.components.ui.FormFields.DataSourceAggregateCol',";i:725;s:39:"                'layout' => 'Vertical',";i:726;s:36:"                'options' => array (";i:727;s:60:"                    'ng-model' => 'active.aggregateColumns',";i:728;s:44:"                    'ng-change' => 'save()',";i:729;s:18:"                ),";i:730;s:45:"                'singleViewOption' => array (";i:731;s:36:"                    'name' => 'val',";i:732;s:42:"                    'fieldType' => 'text',";i:733;s:38:"                    'labelWidth' => 0,";i:734;s:39:"                    'fieldWidth' => 12,";i:735;s:45:"                    'fieldOptions' => array (";i:736;s:42:"                        'ng-delay' => 500,";i:737;s:22:"                    ),";i:738;s:18:"                ),";i:739;s:37:"                'type' => 'ListView',";i:740;s:14:"            ),";i:741;s:19:"            array (";i:742;s:33:"                'type' => 'Text',";i:743;s:38:"                'value' => '    </div>";i:744;s:8:"</div>',";i:745;s:14:"            ),";i:746;s:19:"            array (";i:747;s:33:"                'type' => 'Text',";i:748;s:36:"                'value' => '</div>',";i:749;s:14:"            ),";i:750;s:10:"        );";i:751;s:5:"    }";i:752;s:0:"";i:753;s:38:"    public function actionRelClass() {";i:754;s:36:"        Yii::import($_GET['class']);";i:755;s:58:"        $class = Helper::explodeLast(".", $_GET['class']);";i:756;s:0:"";i:757;s:23:"        $relClass = '';";i:758;s:46:"        if (@$_GET['rel'] == 'currentModel') {";i:759;s:31:"            $relClass = $class;";i:760;s:16:"        } else {";i:761;s:35:"            $model    = new $class;";i:762;s:44:"            $rels     = $model->relations();";i:763;s:48:"            $relClass = @$rels[$_GET['rel']][1];";i:764;s:9:"        }";i:765;s:0:"";i:766;s:43:"        echo Helper::classAlias($relClass);";i:767;s:5:"    }";i:768;s:0:"";i:769;s:37:"    public function getPrimaryKey() {";i:770;s:65:"        if ($this->relationTo == '' || $this->postData == 'No') {";i:771;s:24:"            return 'id';";i:772;s:16:"        } else {";i:773;s:54:"            if ($this->relationTo == 'currentModel') {";i:774;s:71:"                return $this->model->metadata->tableSchema->primaryKey;";i:775;s:20:"            } else {";i:776;s:82:"                $rel       = $this->model->metaData->relations[$this->relationTo];";i:777;s:45:"                $className = $rel->className;";i:778;s:54:"                if (class_exists($className, false)) {";i:779;s:81:"                    $pk = $className::model()->metadata->tableSchema->primaryKey;";i:780;s:41:"                    if (is_string($pk)) {";i:781;s:35:"                        return $pk;";i:782;s:21:"                    }";i:783;s:17:"                }";i:784;s:13:"            }";i:785;s:9:"        }";i:786;s:5:"    }";i:787;s:0:"";i:788;s:35:"    public function actionQuery() {";i:789;s:8:"        ";i:790;s:60:"        $postdata        = file_get_contents("php://input");";i:791;s:52:"        $post            = CJSON::decode($postdata);";i:792;s:68:"        $class           = Helper::explodeLast(".", $post['class']);";i:793;s:36:"        Yii::import($post['class']);";i:794;s:63:"        $this->lastCount = @$post['lc'] > 0 ? @$post['lc'] : 0;";i:795;s:0:"";i:796;s:35:"        if (class_exists($class)) {";i:797;s:47:"            $fb    = FormBuilder::load($class);";i:798;s:63:"            $field = $fb->findField(['name' => $post['name']]);";i:799;s:81:"            if ($field['fieldType'] != "php" && method_exists($class, 'model')) {";i:800;s:51:"                if (!is_null(@$post['model_id'])) {";i:801;s:79:"                    $fb->model = $class::model()->findByPk(@$post['model_id']);";i:802;s:17:"                }";i:803;s:0:"";i:804;s:42:"                if (is_null($fb->model)) {";i:805;s:44:"                    $fb->model = new $class;";i:806;s:17:"                }";i:807;s:13:"            }";i:808;s:0:"";i:809;s:40:"            $this->attributes  = $field;";i:810;s:37:"            $this->builder     = $fb;";i:811;s:86:"            $this->queryParams = (is_array(@$post['params']) ? @$post['params'] : []);";i:812;s:12:"            ";i:813;s:37:"            if (@$post['df'] != '') {";i:814;s:76:"                $this->dataFilter = $fb->findField(['name' => $post['df']]);";i:815;s:57:"                if (isset($this->queryParams['where'])) {";i:816;s:34:"                    $filters = [];";i:817;s:72:"                    foreach ($this->dataFilter['filters'] as $k => $v) {";i:818;s:50:"                        $filters[$v['name']] = $v;";i:819;s:21:"                    }";i:820;s:0:"";i:821;s:65:"                    if (is_array(@$this->queryParams['where'])) {";i:822;s:75:"                        foreach ($this->queryParams['where'] as $k => $v) {";i:823;s:0:"";i:824;s:65:"                            ## prevent sql injection, remove mode";i:825;s:81:"                            if (isset($this->queryParams['where'][$k]['mode'])) {";i:826;s:79:"                                unset($this->queryParams['where'][$k]['mode']);";i:827;s:29:"                            }";i:828;s:0:"";i:829;s:54:"                            if (isset($filters[$k])) {";i:830;s:80:"                                if (isset($filters[$k]['options']['colname'])) {";i:831;s:87:"                                    $this->queryParams['where'][$k]['mode']    = 'raw';";i:832;s:116:"                                    $this->queryParams['where'][$k]['colname'] = $filters[$k]['options']['colname'];";i:833;s:33:"                                }";i:834;s:29:"                            }";i:835;s:25:"                        }";i:836;s:21:"                    }";i:837;s:17:"                }";i:838;s:13:"            }";i:839;s:0:"";i:840;s:73:"            if (is_object($this->model) && isset($post['modelParams'])) {";i:841;s:64:"                $this->model->attributes = $post['modelParams'];";i:842;s:13:"            }";i:843;s:0:"";i:844;s:51:"            $isGenerate = isset($post['generate']);";i:845;s:0:"";i:846;s:43:"            if (is_string($this->params)) {";i:847;s:35:"                $this->params = [];";i:848;s:13:"            }";i:849;s:12:"            ";i:850;s:47:"            $debug =  $this->debugSql == 'Yes';";i:851;s:0:"";i:852;s:106:"            if ($this->postData == 'No' || $this->relationTo == '' || $this->relationTo == '-- NONE --') {";i:853;s:36:"                ## without relatedTo";i:854;s:48:"                $this->prepareGeneratedParams();";i:855;s:43:"                switch ($this->fieldType) {";i:856;s:31:"                    case "sql":";i:857;s:72:"                        $data      = $this->query($this->params,$debug);";i:858;s:30:"                        break;";i:859;s:34:"                    case "phpsql":";i:860;s:67:"                        $this->sql = $this->execute($this->params);";i:861;s:73:"                        $data      = $this->query($this->params, $debug);";i:862;s:30:"                        break;";i:863;s:31:"                    case "php":";i:864;s:67:"                        $data      = $this->execute($this->params);";i:865;s:30:"                        break;";i:866;s:17:"                }";i:867;s:20:"            } else {";i:868;s:33:"                ## with relatedTo";i:869;s:70:"                $data = $this->getRelated($this->params, $isGenerate);";i:870;s:13:"            }";i:871;s:0:"";i:872;s:31:"            if (empty($data)) {";i:873;s:26:"                echo "{}";";i:874;s:22:"                die();";i:875;s:13:"            }";i:876;s:0:"";i:877;s:30:"            echo json_encode([";i:878;s:42:"                'data'   => $data['data'],";i:879;s:52:"                'count'  => $data['debug']['count'],";i:880;s:53:"                'params' => $data['debug']['params'],";i:881;s:76:"                'debug'  => ($this->debugSql == 'Yes' ? $data['debug'] : [])";i:882;s:15:"            ]);";i:883;s:9:"        }";i:884;s:5:"    }";i:885;s:0:"";i:886;s:43:"    public function execute($params = []) {";i:887;s:59:"        $params = array_merge($params, $this->queryParams);";i:888;s:8:"        ";i:889;s:40:"        if ($this->php == '') return [];";i:890;s:0:"";i:891;s:51:"        $data = $this->evaluate($this->php, true, [";i:892;s:32:"            'params' => $params,";i:893;s:36:"            'model'  => $this->model";i:894;s:11:"        ]);";i:895;s:0:"";i:896;s:34:"        $count     = count($data);";i:897;s:37:"        $countFunc = 'count($data);';";i:898;s:43:"        if ($this->enablePaging == 'Yes') {";i:899;s:47:"            if ($this->fieldType == 'phpsql') {";i:900;s:98:"                $this->pagingSQL = $this->evaluate($this->pagingPHP, true, ['params' => $params]);";i:901;s:83:"                $this->pagingSQL = str_replace("{[paging]}", "", $this->pagingSQL);";i:902;s:20:"            } else {";i:903;s:88:"                $count = $this->evaluate($this->pagingPHP, true, ['params' => $params]);";i:904;s:13:"            }";i:905;s:42:"            $countFunc = $this->pagingPHP;";i:906;s:9:"        }";i:907;s:0:"";i:908;s:40:"        if ($this->fieldType == "php") {";i:909;s:20:"            return [";i:910;s:33:"                'data'  => $data,";i:911;s:34:"                'count' => $count,";i:912;s:28:"                'debug' => [";i:913;s:50:"                    'function'      => $this->php,";i:914;s:46:"                    'count'         => $count,";i:915;s:50:"                    'countFunction' => $countFunc,";i:916;s:47:"                    'params'        => $params,";i:917;s:58:"                    'timestamp'     => date('Y-m-d H:i:s')";i:918;s:17:"                ]";i:919;s:14:"            ];";i:920;s:16:"        } else {";i:921;s:25:"            return $data;";i:922;s:9:"        }";i:923;s:5:"    }";i:924;s:0:"";i:925;s:67:"    public function getRelated($params = [], $isGenerate = false) {";i:926;s:65:"        $postedParams = array_merge($params, $this->queryParams);";i:927;s:71:"        $relChanges   = $this->model->getRelChanges($this->relationTo);";i:928;s:100:"        $criteria     = DataSource::generateCriteria($postedParams, $this->relationCriteria, $this);";i:929;s:0:"";i:930;s:35:"        if (@$criteria['params']) {";i:931;s:86:"            $criteria['params'] = array_filter($criteria['params'], function($value) {";i:932;s:78:"                return ($value !== null && $value !== false && $value !== '');";i:933;s:15:"            });";i:934;s:9:"        }";i:935;s:0:"";i:936;s:35:"        $criteriaCount = $criteria;";i:937;s:50:"        if ($this->relationTo == 'currentModel') {";i:938;s:53:"            $tableSchema = $this->model->tableSchema;";i:939;s:56:"            $builder     = $this->model->commandBuilder;";i:940;s:59:"            if (array_key_exists('page', $criteriaCount)) {";i:941;s:101:"                $start                   = ($criteriaCount['page'] - 1) * $criteriaCount['pageSize'];";i:942;s:70:"                $pageSize                = $criteriaCount['pageSize'];";i:943;s:53:"                $criteriaCount['limit']  = $pageSize;";i:944;s:50:"                $criteriaCount['offset'] = $start;";i:945;s:0:"";i:946;s:50:"                unset($criteriaCount['pageSize']);";i:947;s:46:"                unset($criteriaCount['page']);";i:948;s:13:"            }";i:949;s:0:"";i:950;s:104:"            $countCommand = $builder->createCountCommand($tableSchema, new CDbCriteria($criteriaCount));";i:951;s:57:"            $count        = $countCommand->queryScalar();";i:952;s:16:"        } else {";i:953;s:76:"            $rel     = $this->model->metaData->relations[$this->relationTo];";i:954;s:40:"            $fkey    = $rel->foreignKey;";i:955;s:28:"            $useStat = true;";i:956;s:0:"";i:957;s:86:"            if (isset($criteria['condition']) && trim($criteria['condition']) != "") {";i:958;s:33:"                $useStat = false;";i:959;s:13:"            }";i:960;s:0:"";i:961;s:27:"            if ($useStat) {";i:962;s:49:"                if (is_array($rel->foreignKey)) {";i:963;s:47:"                    if (isset($rel->through)) {";i:964;s:86:"                        if (isset($this->model->metaData->relations[$rel->through])) {";i:965;s:85:"                            $relt = $this->model->metaData->relations[$rel->through];";i:966;s:105:"                            if (is_string($relt->foreignKey) && get_class($relt) != 'ManyManyRelation') {";i:967;s:62:"                                $reltClass = $relt->className;";i:968;s:78:"                                $reltTable = $reltClass::model()->tableName();";i:969;s:63:"                                $reltFrom  = $relt->foreignKey;";i:970;s:77:"                                $reltTo    = array_keys($rel->foreignKey)[0];";i:971;s:0:"";i:972;s:78:"                                $fkey = "{$reltTable}({$reltFrom},{$reltTo})";";i:973;s:36:"                            } else {";i:974;s:49:"                                $useStat = false;";i:975;s:29:"                            }";i:976;s:32:"                        } else {";i:977;s:45:"                            $useStat = false;";i:978;s:25:"                        }";i:979;s:28:"                    } else {";i:980;s:41:"                        $useStat = false;";i:981;s:21:"                    }";i:982;s:17:"                }";i:983;s:13:"            }";i:984;s:0:"";i:985;s:27:"            if ($useStat) {";i:986;s:103:"                if (get_class($this->model->metaData->relations[$rel->name]) != 'CBelongsToRelation') {";i:987;s:150:"                    $this->model->metaData->relations[$rel->name . "__psCount"] = new CStatRelation($rel->name . "__psCount", $rel->className, $fkey);";i:988;s:133:"                    $count                                                      = $this->model->getRelated($rel->name . "__psCount");";i:989;s:24:"                } else {";i:990;s:73:"                    $count = count($this->model->getRelated($rel->name));";i:991;s:17:"                }";i:992;s:20:"            } else {";i:993;s:50:"                unset($criteriaCount['pageSize']);";i:994;s:46:"                unset($criteriaCount['page']);";i:995;s:0:"";i:996;s:60:"                // set special flag for counting in criteria";i:997;s:90:"                $rclass = $this->model->metaData->relations[$this->relationTo]->className;";i:998;s:68:"                $rpk    = $rclass::model()->tableSchema->primaryKey;";i:999;s:37:"                if (is_array($rpk)) {";i:1000;s:35:"                    $rpk = $rpk[0];";i:1001;s:17:"                }";i:1002;s:52:"                $criteriaCount['dsCountCol'] = $rpk;";i:1003;s:0:"";i:1004;s:94:"                $rawCount = $this->model->getRelated($this->relationTo, true, $criteriaCount);";i:1005;s:50:"                $count    = @$rawCount[0]->{$rpk};";i:1006;s:13:"            }";i:1007;s:9:"        }";i:1008;s:0:"";i:1009;s:61:"        if (!empty($this->aggregateGroups) && !$isGenerate) {";i:1010;s:38:"            $criteria['aggregate'] = [";i:1011;s:52:"                'groups'  => $this->aggregateGroups,";i:1012;s:31:"                'columns' => []";i:1013;s:14:"            ];";i:1014;s:0:"";i:1015;s:59:"            foreach ($this->aggregateColumns as $k => $c) {";i:1016;s:64:"                $criteria['aggregate']['columns'][$c['col']] = [";i:1017;s:44:"                    'type' => $c['colType'],";i:1018;s:39:"                    'col'  => $c['col']";i:1019;s:18:"                ];";i:1020;s:0:"";i:1021;s:48:"                if ($c['colType'] == 'custom') {";i:1022;s:94:"                    $criteria['aggregate']['columns'][$c['col']]['custom'] = $c['customType'];";i:1023;s:17:"                }";i:1024;s:13:"            }";i:1025;s:9:"        }";i:1026;s:0:"";i:1027;s:0:"";i:1028;s:76:"        $rawData = $this->model->loadRelation($this->relationTo, $criteria);";i:1029;s:0:"";i:1030;s:40:"        ## cleanup rawData from relation";i:1031;s:50:"        // foreach ($rawData as $dataIdx=>$data) {";i:1032;s:55:"        //     foreach ($data as $fieldIdx => $field) {";i:1033;s:42:"        //         if (is_array($field)) {";i:1034;s:60:"        //             unset($rawData[$dataIdx][$fieldIdx]);";i:1035;s:20:"        //         }";i:1036;s:16:"        //     }";i:1037;s:12:"        // }";i:1038;s:0:"";i:1039;s:50:"        if (count($rawData) == 0 && $isGenerate) {";i:1040;s:54:"            if ($this->relationTo != 'currentModel') {";i:1041;s:54:"                $rels     = $this->model->relations();";i:1042;s:56:"                $relClass = $rels[$this->relationTo][1];";i:1043;s:20:"            } else {";i:1044;s:52:"                $relClass = get_class($this->model);";i:1045;s:13:"            }";i:1046;s:0:"";i:1047;s:72:"            $rawData = [$relClass::model()->getAttributes(true, false)];";i:1048;s:9:"        }";i:1049;s:0:"";i:1050;s:72:"        if ($this->maxAggregateLevel <= count($this->aggregateGroups)) {";i:1051;s:57:"            $max          = $this->maxAggregateLevel - 1;";i:1052;s:48:"            $rawDataCount = count($rawData) - 1;";i:1053;s:53:"            for ($k = $rawDataCount; $k >= 0; $k--) {";i:1054;s:116:"                if (isset($rawData[$k]['$type']) && $rawData[$k]['$type'] == 'a' && $rawData[$k]['$level'] > $max) {";i:1055;s:50:"                    $rawData[$k]['$aggr'] = false;";i:1056;s:17:"                }";i:1057;s:56:"                if ($max == -1 && $rawDataCount == $k) {";i:1058;s:49:"                    $rawData[$k]['$aggr'] = true;";i:1059;s:17:"                }";i:1060;s:13:"            }";i:1061;s:9:"        }";i:1062;s:8:"        ";i:1063;s:19:"        $slog = [];";i:1064;s:39:"        if ($this->debugSql == 'Yes') {";i:1065;s:37:"            $logger=Yii::getLogger();";i:1066;s:45:"            foreach ($logger->logs as $log) {";i:1067;s:86:"                if ($log[1] == 'profile' && $log[2] == 'system.db.CDbCommand.query') {";i:1068;s:58:"                    if (strpos($log[0], 'begin:') === 0) {";i:1069;s:67:"                        $l = explode('<|#-SEPARATOR-#|>', $log[0]);";i:1070;s:68:"                        $slog[] = SqlFormatter::format(trim($l[1]));";i:1071;s:21:"                    }";i:1072;s:17:"                }";i:1073;s:13:"            }";i:1074;s:9:"        }";i:1075;s:8:"        ";i:1076;s:17:"        $data = [";i:1077;s:32:"            'data'  => $rawData,";i:1078;s:24:"            'debug' => [";i:1079;s:35:"                'count'  => $count,";i:1080;s:42:"                'params' => $postedParams,";i:1081;s:38:"                'debug'  => $criteria,";i:1082;s:30:"                'sql' => $slog";i:1083;s:14:"            ],";i:1084;s:24:"            'rel'   => [";i:1085;s:55:"                'insert_data' => $relChanges['insert'],";i:1086;s:55:"                'update_data' => $relChanges['update'],";i:1087;s:55:"                'delete_data' => $relChanges['delete'],";i:1088;s:13:"            ]";i:1089;s:10:"        ];";i:1090;s:0:"";i:1091;s:21:"        return $data;";i:1092;s:5:"    }";i:1093;s:0:"";i:1094;s:79:"    public static function generateCriteria($postedParams, $criteria, $field) {";i:1095;s:87:"        if (isset($criteria['select']) && stripos($criteria['select'], 'php:') === 0) {";i:1096;s:83:"            $criteria['select'] = Helper::evaluate(substr($criteria['select'], 4));";i:1097;s:9:"        }";i:1098;s:0:"";i:1099;s:26:"        ## paging criteria";i:1100;s:51:"        if (@$criteria['paging'] == '{[paging]}') {";i:1101;s:38:"            $criteria['page']     = 1;";i:1102;s:39:"            $criteria['pageSize'] = 25;";i:1103;s:9:"        }";i:1104;s:0:"";i:1105;s:49:"        if (is_array(@$postedParams['paging'])) {";i:1106;s:64:"            if (isset($postedParams['paging']['currentPage'])) {";i:1107;s:75:"                $criteria['page'] = $postedParams['paging']['currentPage'];";i:1108;s:20:"            } else {";i:1109;s:38:"                $criteria['page'] = 1;";i:1110;s:13:"            }";i:1111;s:72:"            $criteria['pageSize'] = $postedParams['paging']['pageSize'];";i:1112;s:9:"        }";i:1113;s:0:"";i:1114;s:25:"        ## order criteria";i:1115;s:73:"        if (isset($criteria['order']) && is_string($criteria['order'])) {";i:1116;s:52:"            $sql               = $criteria['order'];";i:1117;s:91:"            $bracket           = DataSource::generateTemplate($sql, $postedParams, $field);";i:1118;s:78:"            $criteria['order'] = str_replace("order by", "", $bracket['sql']);";i:1119;s:44:"            if (isset($bracket['params'])) {";i:1120;s:58:"                foreach ($bracket['params'] as $k => $p) {";i:1121;s:53:"                    $postedParams['params'][$k] = $p;";i:1122;s:17:"                }";i:1123;s:13:"            }";i:1124;s:9:"        }";i:1125;s:0:"";i:1126;s:29:"        ## condition criteria";i:1127;s:81:"        if (isset($criteria['condition']) && is_string($criteria['condition'])) {";i:1128;s:42:"            $sql = $criteria['condition'];";i:1129;s:0:"";i:1130;s:81:"            $bracket = DataSource::generateTemplate($sql, $postedParams, $field);";i:1131;s:12:"            ";i:1132;s:40:"            if ($bracket['sql'] != '') {";i:1133;s:63:"                if (substr($bracket['sql'], 0, 5) == 'where') {";i:1134;s:72:"                    $criteria['condition'] = substr($bracket['sql'], 5);";i:1135;s:24:"                } else {";i:1136;s:61:"                    $criteria['condition'] = $bracket['sql'];";i:1137;s:17:"                }";i:1138;s:0:"";i:1139;s:88:"                $params = isset($postedParams['params']) ? $postedParams['params'] : [];";i:1140;s:0:"";i:1141;s:61:"                ## special params case, query from datafilter";i:1142;s:60:"                if (isset($postedParams[':dataFilterID'])) {";i:1143;s:89:"                    $bracket['params'][':dataFilterID'] = $postedParams[':dataFilterID'];";i:1144;s:17:"                }";i:1145;s:0:"";i:1146;s:79:"                $criteria['params'] = array_merge($params, $bracket['params']);";i:1147;s:47:"            } else if ($bracket['sql'] == '') {";i:1148;s:46:"                unset($criteria['condition']);";i:1149;s:13:"            }";i:1150;s:9:"        }";i:1151;s:82:"        $criteria['distinct'] = (@$criteria['distinct'] == 'true' ? true : false);";i:1152;s:41:"        if (isset($criteria['paging'])) {";i:1153;s:39:"            unset($criteria['paging']);";i:1154;s:9:"        }";i:1155;s:0:"";i:1156;s:70:"        if (isset($criteria['select']) && $criteria['select'] == '') {";i:1157;s:39:"            unset($criteria['select']);";i:1158;s:9:"        }";i:1159;s:0:"";i:1160;s:41:"        foreach ($criteria as $k => $m) {";i:1161;s:32:"            if (is_string($m)) {";i:1162;s:50:"                $criteria[$k] = stripcslashes($m);";i:1163;s:13:"            }";i:1164;s:9:"        }";i:1165;s:60:"        $criteria = ActiveRecord::formatCriteria($criteria);";i:1166;s:25:"        return $criteria;";i:1167;s:5:"    }";i:1168;s:0:"";i:1169;s:45:"    public function getPostName($mode = '') {";i:1170;s:77:"        if ($this->relationTo == '' || $this->relationTo == 'currentModel') {";i:1171;s:39:"            return $this->name . $mode;";i:1172;s:16:"        } else {";i:1173;s:83:"            $name = str_replace($this->name, $this->relationTo, $this->renderName);";i:1174;s:0:"";i:1175;s:30:"            if ($mode != '') {";i:1176;s:63:"                $name = substr_replace($name, $mode . ']', -1);";i:1177;s:13:"            }";i:1178;s:25:"            return $name;";i:1179;s:9:"        }";i:1180;s:5:"    }";i:1181;s:0:"";i:1182;s:7:"    /**";i:1183;s:63:"     * @return array me-return array javascript yang di-include";i:1184;s:7:"     */";i:1185;s:33:"    public function includeJS() {";i:1186;s:34:"        return ['data-source.js'];";i:1187;s:5:"    }";i:1188;s:0:"";i:1189;s:47:"    private function prepareGeneratedParams() {";i:1190;s:23:"        $where  = null;";i:1191;s:23:"        $paging = null;";i:1192;s:23:"        $order  = null;";i:1193;s:65:"        if ($this->relationTo == '' || $this->postData == 'No') {";i:1194;s:49:"            if (!isset($this->params['where'])) {";i:1195;s:122:"                $where                 = $this->builder->findField(['datasource' => $this->name, 'type' => 'DataFilter']);";i:1196;s:56:"                $this->params['where'] = $where['name'];";i:1197;s:13:"            }";i:1198;s:0:"";i:1199;s:84:"            if (!isset($this->params['order']) || !isset($this->params['paging'])) {";i:1200;s:54:"                if (!isset($this->params['paging'])) {";i:1201;s:125:"                    $paging                 = $this->builder->findField(['datasource' => $this->name, 'type' => 'GridView']);";i:1202;s:62:"                    $this->params['paging'] = $paging['name'];";i:1203;s:17:"                }";i:1204;s:0:"";i:1205;s:53:"                if (!isset($this->params['order'])) {";i:1206;s:34:"                    if ($paging) {";i:1207;s:41:"                        $order = $paging;";i:1208;s:28:"                    } else {";i:1209;s:112:"                        $order = $this->builder->findField(['datasource' => $this->name, 'type' => 'GridView']);";i:1210;s:21:"                    }";i:1211;s:60:"                    $this->params['order'] = $order['name'];";i:1212;s:17:"                }";i:1213;s:13:"            }";i:1214;s:9:"        }";i:1215;s:16:"        return [";i:1216;s:31:"            'where'  => $where,";i:1217;s:32:"            'paging' => $paging,";i:1218;s:30:"            'order'  => $order";i:1219;s:10:"        ];";i:1220;s:5:"    }";i:1221;s:0:"";i:1222;s:7:"    /**";i:1223;s:13:"     * render";i:1224;s:54:"     * Fungsi ini untuk me-render field dan atributnya";i:1225;s:86:"     * @return mixed me-return sebuah field dan atribut checkboxlist dari hasil render";i:1226;s:7:"     */";i:1227;s:30:"    public function render() {";i:1228;s:26:"        $execQuery = true;";i:1229;s:51:"        $gParams = $this->prepareGeneratedParams();";i:1230;s:8:"        ";i:1231;s:105:"        $field = $this->builder->findField(['datasource'=>$this->name, 'type'=> 'DataFilter']); // filter";i:1232;s:44:"        if (isset($this->params['where'])) {";i:1233;s:36:"            if ($gParams['where']) {";i:1234;s:43:"                $field = $gParams['where'];";i:1235;s:20:"            } else {";i:1236;s:87:"                $field = $this->builder->findField(['name' => $this->params['where']]);";i:1237;s:13:"            }";i:1238;s:9:"        }";i:1239;s:0:"";i:1240;s:21:"        if ($field) {";i:1241;s:47:"            foreach ($field['filters'] as $f) {";i:1242;s:93:"                $dateCondition = @$f['defaultOperator'] != '' && @$f['filterType'] == 'date';";i:1243;s:66:"                if (@$f['defaultValue'] != '' || $dateCondition ||";i:1244;s:84:"                        @$f['defaultValueFrom'] != '' || @$f['defaultValueTo'] != ''";i:1245;s:19:"                ) {";i:1246;s:39:"                    $execQuery = false;";i:1247;s:17:"                }";i:1248;s:13:"            }";i:1249;s:9:"        }";i:1250;s:0:"";i:1251;s:87:"        if ($execQuery && ($this->execMode == 'before' || $this->execMode == 'auto')) {";i:1252;s:46:"            if ($this->execMode == 'before') {";i:1253;s:38:"                $this->processQuery();";i:1254;s:50:"            } else if ($this->execMode == 'auto'){";i:1255;s:47:"                foreach ($this->params as $p) {";i:1256;s:50:"                    if (strpos($p, 'js:') === 0) {";i:1257;s:43:"                        $execQuery = false;";i:1258;s:21:"                    }";i:1259;s:17:"                }";i:1260;s:16:"                ";i:1261;s:33:"                if ($execQuery) {";i:1262;s:42:"                    $this->processQuery();";i:1263;s:17:"                }";i:1264;s:13:"            }";i:1265;s:16:"        } else {";i:1266;s:27:"            $this->data = [";i:1267;s:31:"                'data'   => [],";i:1268;s:30:"                'count'  => 0,";i:1269;s:42:"                'params' => $this->params,";i:1270;s:31:"                'debug'  => '',";i:1271;s:30:"                'rel'    => ''";i:1272;s:14:"            ];";i:1273;s:9:"        }";i:1274;s:8:"        ";i:1275;s:41:"        if ($this->cacheQuery == 'Yes') {";i:1276;s:30:"            $this->setCache();";i:1277;s:9:"        }";i:1278;s:0:"";i:1279;s:60:"        return $this->renderInternal('template_render.php');";i:1280;s:5:"    }";i:1281;s:0:"";i:1282;s:32:"    public function setCache() {";i:1283;s:50:"        if (!isset($GLOBALS['dataSourceCache'])) {";i:1284;s:67:"            $GLOBALS['dataSourceCache'][$this->name] = $this->data;";i:1285;s:9:"        }";i:1286;s:5:"    }";i:1287;s:0:"";i:1288;s:36:"    public function processQuery() {";i:1289;s:39:"        if (is_string($this->params)) {";i:1290;s:31:"            $this->params = [];";i:1291;s:9:"        }";i:1292;s:0:"";i:1293;s:65:"        if ($this->relationTo == '' || $this->postData == 'No') {";i:1294;s:32:"            ## without relatedTo";i:1295;s:39:"            switch ($this->fieldType) {";i:1296;s:27:"                case "sql":";i:1297;s:61:"                    $data      = $this->query($this->params);";i:1298;s:26:"                    break;";i:1299;s:30:"                case "phpsql":";i:1300;s:63:"                    $this->sql = $this->execute($this->params);";i:1301;s:0:"";i:1302;s:43:"                    if ($this->sql != '') {";i:1303;s:60:"                        $data = $this->query($this->params);";i:1304;s:28:"                    } else {";i:1305;s:33:"                        $data = [";i:1306;s:42:"                            'data'  => [],";i:1307;s:40:"                            'debug' => [";i:1308;s:46:"                                'count'  => 0,";i:1309;s:57:"                                'params' => $this->params";i:1310;s:29:"                            ]";i:1311;s:26:"                        ];";i:1312;s:21:"                    }";i:1313;s:26:"                    break;";i:1314;s:27:"                case "php":";i:1315;s:58:"                    $data = $this->execute($this->params);";i:1316;s:26:"                    break;";i:1317;s:13:"            }";i:1318;s:16:"        } else {";i:1319;s:29:"            ## with relatedTo";i:1320;s:53:"            $data = $this->getRelated($this->params);";i:1321;s:9:"        }";i:1322;s:8:"        ";i:1323;s:23:"        $this->data = [";i:1324;s:39:"            'data'   => @$data['data'],";i:1325;s:49:"            'count'  => @$data['debug']['count'],";i:1326;s:50:"            'params' => @$data['debug']['params'],";i:1327;s:74:"            'debug'  => ($this->debugSql == 'Yes' ? @$data['debug'] : []),";i:1328;s:37:"            'rel'    => @$data['rel']";i:1329;s:10:"        ];";i:1330;s:5:"    }";i:1331;s:0:"";i:1332;s:1:"}";}s:7:"methods";a:19:{s:8:"querySql";a:2:{s:4:"line";i:47;s:6:"length";i:16;}s:5:"query";a:2:{s:4:"line";i:68;s:6:"length";i:55;}s:15:"processSubBlock";a:2:{s:4:"line";i:124;s:6:"length";i:47;}s:16:"generateTemplate";a:2:{s:4:"line";i:172;s:6:"length";i:150;}s:17:"processSQLBracket";a:2:{s:4:"line";i:324;s:6:"length";i:61;}s:9:"concatSql";a:2:{s:4:"line";i:386;s:6:"length";i:20;}s:18:"getFieldProperties";a:2:{s:4:"line";i:410;s:6:"length";i:342;}s:14:"actionRelClass";a:2:{s:4:"line";i:753;s:6:"length";i:15;}s:13:"getPrimaryKey";a:2:{s:4:"line";i:769;s:6:"length";i:18;}s:11:"actionQuery";a:2:{s:4:"line";i:788;s:6:"length";i:97;}s:7:"execute";a:2:{s:4:"line";i:886;s:6:"length";i:38;}s:10:"getRelated";a:2:{s:4:"line";i:925;s:6:"length";i:168;}s:16:"generateCriteria";a:2:{s:4:"line";i:1094;s:6:"length";i:74;}s:11:"getPostName";a:2:{s:4:"line";i:1169;s:6:"length";i:12;}s:9:"includeJS";a:2:{s:4:"line";i:1185;s:6:"length";i:3;}s:22:"prepareGeneratedParams";a:2:{s:4:"line";i:1189;s:6:"length";i:32;}s:6:"render";a:2:{s:4:"line";i:1227;s:6:"length";i:54;}s:8:"setCache";a:2:{s:4:"line";i:1282;s:6:"length";i:5;}s:12:"processQuery";a:2:{s:4:"line";i:1288;s:6:"length";i:43;}}}i:1;N;}